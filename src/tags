!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ABORT	utility/abort.h	45;"	d
ADD_DELTA_INTERACTION	module/markov/markov.h	/^        ADD_DELTA_INTERACTION,$/;"	e	enum:mc::Markov::Operations
ADD_INTERACTION	module/markov/markov.h	/^        ADD_INTERACTION,$/;"	e	enum:mc::Markov::Operations
ASSERT_ALLWAYS	utility/abort.h	48;"	d
Accepted	module/markov/markov.h	/^    real Accepted[NUpdates][MAX_ORDER];$/;"	m	class:mc::Markov
Add	module/diagram/component_bundle.cpp	/^T *Bundle<T>::Add()$/;"	f	class:Bundle
Add	module/diagram/component_bundle.cpp	/^void Bundle<T>::Add(T *Target)$/;"	f	class:Bundle
AddDeltaInteraction	module/markov/markov.cpp	/^void Markov::AddDeltaInteraction()$/;"	f	class:Markov
AddEstimator	estimator/estimator.cpp	/^void EstimatorBundle<T>::AddEstimator(const Estimator<T>& est)$/;"	f	class:EstimatorBundle
AddEstimator	estimator/estimator.cpp	/^void EstimatorBundle<T>::AddEstimator(string name)$/;"	f	class:EstimatorBundle
AddGHash	module/diagram/diagram.cpp	/^void Diagram::AddGHash(Momentum k)$/;"	f	class:Diagram
AddInteraction	module/markov/markov.cpp	/^void Markov::AddInteraction()$/;"	f	class:Markov
AddStatistics	estimator/estimator.cpp	/^void Estimator<T>::AddStatistics()$/;"	f	class:Estimator
AddStatistics	estimator/estimator.cpp	/^void EstimatorBundle<T>::AddStatistics()$/;"	f	class:EstimatorBundle
AddStatistics	module/markov/markov_monitor.cpp	/^void MarkovMonitor::AddStatistics()$/;"	f	class:MarkovMonitor
AddToTuple	utility/pyglue/type_cast.h	/^AddToTuple(Object obj, std::tuple<Args...>& tup)$/;"	f	namespace:Python
AddWHash	module/diagram/diagram.cpp	/^void Diagram::AddWHash(Momentum k)$/;"	f	class:Diagram
AdjustOrderReWeight	environment/envMonteCarlo.cpp	/^void EnvMonteCarlo::AdjustOrderReWeight()$/;"	f	class:EnvMonteCarlo
AdjustOrderReWeight	module/markov/markov_monitor.cpp	/^bool MarkovMonitor::AdjustOrderReWeight()$/;"	f	class:MarkovMonitor
Allocate	module/weight/weight_array.cpp	/^void WeightArray<DIM>::Allocate(const uint* Shape_, const std::string Name)$/;"	f	class:weight::WeightArray
Allocate	module/weight/weight_estimator.cpp	/^void WeightEstimator::Allocate(const IndexMap& map, int order, real Norm)$/;"	f	class:WeightEstimator
Anneal	module/weight/weight.cpp	/^void weight::Weight::Anneal(const ParaMC &para)$/;"	f	class:weight::Weight
Anneal	module/weight/weight_estimator.cpp	/^void WeightEstimator::Anneal(real Beta)$/;"	f	class:WeightEstimator
AnyObject	utility/pyglue/pywrapper.h	/^    AnyObject()$/;"	f	class:Python::AnyObject
AnyObject	utility/pyglue/pywrapper.h	/^    AnyObject(PyObject* obj, OwnerShip ownership = NewRef)$/;"	f	class:Python::AnyObject
AnyObject	utility/pyglue/pywrapper.h	/^    AnyObject(T value)$/;"	f	class:Python::AnyObject
AnyObject	utility/pyglue/pywrapper.h	/^    AnyObject(const Object& obj)$/;"	f	class:Python::AnyObject
AnyObject	utility/pyglue/pywrapper.h	/^class AnyObject : public Object {$/;"	c	namespace:Python
ArrayInitialize	utility/pyglue/pyarraywrapper.cpp	/^void ArrayInitialize()$/;"	f	namespace:Python
ArrayObject	utility/pyglue/pyarraywrapper.cpp	/^ArrayObject::ArrayObject(PyObject* obj, OwnerShip ownership)$/;"	f	class:Python::ArrayObject
ArrayObject	utility/pyglue/pyarraywrapper.cpp	/^ArrayObject::ArrayObject(const Object& obj)$/;"	f	class:Python::ArrayObject
ArrayObject	utility/pyglue/pyarraywrapper.h	/^    ArrayObject()$/;"	f	class:Python::ArrayObject
ArrayObject	utility/pyglue/pyarraywrapper.h	/^    ArrayObject(T* data, const std::vector<uint>& Shape, const int Dim)$/;"	f	class:Python::ArrayObject
ArrayObject	utility/pyglue/pyarraywrapper.h	/^    ArrayObject(T* data, const uint* Shape, const int Dim)$/;"	f	class:Python::ArrayObject
ArrayObject	utility/pyglue/pyarraywrapper.h	/^class ArrayObject : public Object {$/;"	c	namespace:Python
As	utility/pyglue/pywrapper.h	/^    T As()$/;"	f	class:Python::AnyObject
Assign	module/weight/weight_array.cpp	/^void WeightArray<DIM>::Assign(const Complex& c)$/;"	f	class:weight::WeightArray
Assign	module/weight/weight_array.cpp	/^void WeightArray<DIM>::Assign(const Complex* source)$/;"	f	class:weight::WeightArray
Assign	module/weight/weight_array.cpp	/^void WeightArray<DIM>::Assign(const Complex* source, uint size)$/;"	f	class:weight::WeightArray
AssignFromTo	utility/utility.h	/^void AssignFromTo(T* source, T* target, int size)$/;"	f
Beta	module/markov/markov.h	/^    real Beta;$/;"	m	class:mc::Markov
Beta	module/parameter/message.h	/^    real Beta;$/;"	m	class:para::Message
Beta	module/parameter/parameter.h	/^    real Beta;$/;"	m	class:para::Parameter
Beta	module/weight/index_map.h	/^    real Beta;$/;"	m	class:weight::IndexMap
BigLoad	utility/dictionary.cpp	/^void Dictionary::BigLoad(const std::string& FileName)$/;"	f	class:Dictionary
BigSave	utility/dictionary.cpp	/^void Dictionary::BigSave(const std::string& FileName)$/;"	f	class:Dictionary
BuildNew	environment/envMonteCarlo.cpp	/^bool EnvMonteCarlo::BuildNew()$/;"	f	class:EnvMonteCarlo
BuildNew	module/diagram/diagram_IO.cpp	/^void Diagram::BuildNew(Lattice& lat, weight::G& g, weight::W& w)$/;"	f	class:Diagram
BuildNew	module/markov/markov.cpp	/^bool Markov::BuildNew(ParaMC &para, Diagram &diag, weight::Weight &weight)$/;"	f	class:Markov
BuildNew	module/markov/markov_monitor.cpp	/^bool MarkovMonitor::BuildNew(ParaMC &para, Diagram &diag, weight::Weight &weight)$/;"	f	class:MarkovMonitor
BuildNew	module/parameter/parameter.cpp	/^bool ParaMC::BuildNew(const std::string& InputFile)$/;"	f	class:ParaMC
BuildNew	module/weight/component.cpp	/^void Polar::BuildNew()$/;"	f	class:Polar
BuildNew	module/weight/component.cpp	/^void Sigma::BuildNew()$/;"	f	class:Sigma
BuildNew	module/weight/weight.cpp	/^bool weight::Weight::BuildNew(flag _flag, const ParaMC &para)$/;"	f	class:weight::Weight
BuildTest	module/weight/component.cpp	/^void G::BuildTest()$/;"	f	class:G
BuildTest	module/weight/component.cpp	/^void Polar::BuildTest()$/;"	f	class:Polar
BuildTest	module/weight/component.cpp	/^void Sigma::BuildTest()$/;"	f	class:Sigma
BuildTest	module/weight/component.cpp	/^void W::BuildTest()$/;"	f	class:W
Bundle	module/diagram/component_bundle.cpp	/^Bundle<T>::Bundle(string bundle_name)$/;"	f	class:Bundle
Bundle	module/diagram/component_bundle.h	/^class Bundle {$/;"	c	namespace:diag
BundleName	module/diagram/component_bundle.cpp	/^string Bundle<T>::BundleName()$/;"	f	class:Bundle
CHANGE_CONTINUS2DELTA	module/markov/markov.h	/^        CHANGE_CONTINUS2DELTA,$/;"	e	enum:mc::Markov::Operations
CHANGE_DELTA2CONTINUS	module/markov/markov.h	/^        CHANGE_DELTA2CONTINUS,$/;"	e	enum:mc::Markov::Operations
CHANGE_MEASURE_G2W	module/markov/markov.h	/^        CHANGE_MEASURE_G2W,$/;"	e	enum:mc::Markov::Operations
CHANGE_MEASURE_W2G	module/markov/markov.h	/^        CHANGE_MEASURE_W2G,$/;"	e	enum:mc::Markov::Operations
CHANGE_R_LOOP	module/markov/markov.h	/^        CHANGE_R_LOOP,$/;"	e	enum:mc::Markov::Operations
CHANGE_R_VERTEX	module/markov/markov.h	/^        CHANGE_R_VERTEX,$/;"	e	enum:mc::Markov::Operations
CHANGE_SPIN_VERTEX	module/markov/markov.h	/^        CHANGE_SPIN_VERTEX,$/;"	e	enum:mc::Markov::Operations
CHANGE_TAU_VERTEX	module/markov/markov.h	/^        CHANGE_TAU_VERTEX,$/;"	e	enum:mc::Markov::Operations
CHECKNULL	utility/utility.h	87;"	d
CPU	job/inlist_template.py	/^CPU = 4$/;"	v
CREATE_WORM	module/markov/markov.h	/^        CREATE_WORM = 0,$/;"	e	enum:mc::Markov::Operations
CallFunction	utility/pyglue/pywrapper.cpp	/^Object ModuleObject::CallFunction(const std::string& name)$/;"	f	class:Python::ModuleObject
CallFunction	utility/pyglue/pywrapper.h	/^    Object CallFunction(const std::string& name, const Args&... args)$/;"	f	class:Python::ModuleObject
CanNotMoveWorm	module/markov/markov.cpp	/^bool CanNotMoveWorm(int dspin, spin sg, int dir)$/;"	f
CanNotMoveWorm	module/markov/markov.cpp	/^bool CanNotMoveWorm(int dspin, spin sin, spin sout)$/;"	f
CastToPy	utility/pyglue/type_cast.cpp	/^Object CastToPy(Momentum k)$/;"	f	namespace:Python
CastToPy	utility/pyglue/type_cast.cpp	/^Object CastToPy(Object obj)$/;"	f	namespace:Python
CastToPy	utility/pyglue/type_cast.cpp	/^Object CastToPy(bool value)$/;"	f	namespace:Python
CastToPy	utility/pyglue/type_cast.cpp	/^Object CastToPy(const Complex& num)$/;"	f	namespace:Python
CastToPy	utility/pyglue/type_cast.cpp	/^Object CastToPy(const ITypeCast& val)$/;"	f	namespace:Python
CastToPy	utility/pyglue/type_cast.cpp	/^Object CastToPy(const RandomFactory& rng)$/;"	f	namespace:Python
CastToPy	utility/pyglue/type_cast.cpp	/^Object CastToPy(const char* str)$/;"	f	namespace:Python
CastToPy	utility/pyglue/type_cast.cpp	/^Object CastToPy(const std::string& str)$/;"	f	namespace:Python
CastToPy	utility/pyglue/type_cast.cpp	/^Object CastToPy(double num)$/;"	f	namespace:Python
CastToPy	utility/pyglue/type_cast.cpp	/^Object CastToPy(float num)$/;"	f	namespace:Python
CastToPy	utility/pyglue/type_cast.cpp	/^Object CastToPy(int num)$/;"	f	namespace:Python
CastToPy	utility/pyglue/type_cast.cpp	/^Object CastToPy(long long num)$/;"	f	namespace:Python
CastToPy	utility/pyglue/type_cast.cpp	/^Object CastToPy(long num)$/;"	f	namespace:Python
CastToPy	utility/pyglue/type_cast.cpp	/^Object CastToPy(spin num)$/;"	f	namespace:Python
CastToPy	utility/pyglue/type_cast.cpp	/^Object CastToPy(unsigned int num)$/;"	f	namespace:Python
CastToPy	utility/pyglue/type_cast.cpp	/^Object CastToPy(unsigned long long num)$/;"	f	namespace:Python
CastToPy	utility/pyglue/type_cast.cpp	/^Object CastToPy(unsigned long num)$/;"	f	namespace:Python
CastToPy	utility/pyglue/type_cast.h	/^Object CastToPy($/;"	f	namespace:Python
CastToPy	utility/pyglue/type_cast.h	/^Object CastToPy(const Vec<T>& container)$/;"	f	namespace:Python
CastToPy	utility/pyglue/type_cast.h	/^Object CastToPy(const std::list<T>& container)$/;"	f	namespace:Python
CastToPy	utility/pyglue/type_cast.h	/^Object CastToPy(const std::vector<T>& container)$/;"	f	namespace:Python
CastToPyList	utility/pyglue/type_cast.h	/^static Object CastToPyList(const T& container)$/;"	f	namespace:Python
Center	utility/utility.cpp	/^std::string Center(const string s, const int w)$/;"	f
ChangeContinuousToDelta	module/markov/markov.cpp	/^void Markov::ChangeContinuousToDelta()$/;"	f	class:Markov
ChangeDeltaToContinuous	module/markov/markov.cpp	/^void Markov::ChangeDeltaToContinuous()$/;"	f	class:Markov
ChangeMeasureFromGToW	module/markov/markov.cpp	/^void Markov::ChangeMeasureFromGToW()$/;"	f	class:Markov
ChangeMeasureFromWToG	module/markov/markov.cpp	/^void Markov::ChangeMeasureFromWToG()$/;"	f	class:Markov
ChangeRLoop	module/markov/markov.cpp	/^void Markov::ChangeRLoop()$/;"	f	class:Markov
ChangeROnVertex	module/markov/markov.cpp	/^void Markov::ChangeROnVertex()$/;"	f	class:Markov
ChangeSpinOnVertex	module/markov/markov.cpp	/^void Markov::ChangeSpinOnVertex()$/;"	f	class:Markov
ChangeTauOnVertex	module/markov/markov.cpp	/^void Markov::ChangeTauOnVertex()$/;"	f	class:Markov
CheckDiagram	module/diagram/diagram_check.cpp	/^bool Diagram::CheckDiagram()$/;"	f	class:Diagram
CheckNameInBundle	module/diagram/diagram_test.cpp	/^bool CheckNameInBundle(Bundle<GLine>& b)$/;"	f
CleanFile	utility/utility.cpp	/^bool CleanFile(const string& FileName)$/;"	f
Clear	utility/dictionary.cpp	/^void Dictionary::Clear()$/;"	f	class:Dictionary
ClearDiagram	module/diagram/diagram.cpp	/^void Diagram::ClearDiagram()$/;"	f	class:Diagram
ClearError	utility/pyglue/object.cpp	/^void ClearError()$/;"	f	namespace:Python
ClearStatistics	estimator/estimator.cpp	/^void Estimator<T>::ClearStatistics()$/;"	f	class:Estimator
ClearStatistics	estimator/estimator.cpp	/^void EstimatorBundle<T>::ClearStatistics()$/;"	f	class:EstimatorBundle
ClearStatistics	module/weight/weight_estimator.cpp	/^void WeightEstimator::ClearStatistics()$/;"	f	class:WeightEstimator
Common	job/inlist_template.py	/^Common={$/;"	v
Complex	utility/complex.cpp	/^Complex::Complex()$/;"	f	class:Complex
Complex	utility/complex.cpp	/^Complex::Complex(const Complex& c)$/;"	f	class:Complex
Complex	utility/complex.cpp	/^Complex::Complex(real re, real im)$/;"	f	class:Complex
Complex	utility/complex.h	/^class Complex {$/;"	c
Complex_h	utility/complex.h	16;"	d
ConfigKey	environment/envMonteCarlo.cpp	/^const string ConfigKey = "Config";$/;"	v
Convert	utility/pyglue/pyarraywrapper.cpp	/^bool Convert(Object obj, ArrayObject& array)$/;"	f	namespace:Python
Convert	utility/pyglue/pywrapper.cpp	/^bool Convert(Object obj, AnyObject& any)$/;"	f	namespace:Python
Convert	utility/pyglue/type_cast.cpp	/^bool Convert(Object obj, Complex& val)$/;"	f	namespace:Python
Convert	utility/pyglue/type_cast.cpp	/^bool Convert(Object obj, ITypeCast& value)$/;"	f	namespace:Python
Convert	utility/pyglue/type_cast.cpp	/^bool Convert(Object obj, Momentum& val)$/;"	f	namespace:Python
Convert	utility/pyglue/type_cast.cpp	/^bool Convert(Object obj, RandomFactory& rng)$/;"	f	namespace:Python
Convert	utility/pyglue/type_cast.cpp	/^bool Convert(Object obj, bool& value)$/;"	f	namespace:Python
Convert	utility/pyglue/type_cast.cpp	/^bool Convert(Object obj, double& val)$/;"	f	namespace:Python
Convert	utility/pyglue/type_cast.cpp	/^bool Convert(Object obj, float& val)$/;"	f	namespace:Python
Convert	utility/pyglue/type_cast.cpp	/^bool Convert(Object obj, int& value)$/;"	f	namespace:Python
Convert	utility/pyglue/type_cast.cpp	/^bool Convert(Object obj, long long& value)$/;"	f	namespace:Python
Convert	utility/pyglue/type_cast.cpp	/^bool Convert(Object obj, long& value)$/;"	f	namespace:Python
Convert	utility/pyglue/type_cast.cpp	/^bool Convert(Object obj, spin& val)$/;"	f	namespace:Python
Convert	utility/pyglue/type_cast.cpp	/^bool Convert(Object obj, std::string& val)$/;"	f	namespace:Python
Convert	utility/pyglue/type_cast.cpp	/^bool Convert(Object obj, unsigned int& value)$/;"	f	namespace:Python
Convert	utility/pyglue/type_cast.cpp	/^bool Convert(Object obj, unsigned long long& value)$/;"	f	namespace:Python
Convert	utility/pyglue/type_cast.cpp	/^bool Convert(Object obj, unsigned long& value)$/;"	f	namespace:Python
Convert	utility/pyglue/type_cast.h	/^bool Convert(Object obj, Vec<T>& val)$/;"	f	namespace:Python
Convert	utility/pyglue/type_cast.h	/^bool Convert(Object obj, std::list<T>& lst)$/;"	f	namespace:Python
Convert	utility/pyglue/type_cast.h	/^bool Convert(Object obj, std::map<K, V>& mp)$/;"	f	namespace:Python
Convert	utility/pyglue/type_cast.h	/^bool Convert(Object obj, std::tuple<Args...>& tup)$/;"	f	namespace:Python
Convert	utility/pyglue/type_cast.h	/^bool Convert(Object obj, std::vector<T>& vec)$/;"	f	namespace:Python
ConvertList	utility/pyglue/type_cast.h	/^bool ConvertList(Object obj, C& container)$/;"	f	namespace:Python
ConvertReal	utility/pyglue/type_cast.cpp	/^bool ConvertReal(Object obj, T& val)$/;"	f	namespace:Python
CoordiIndex	lattice/lattice.cpp	/^int Lattice::CoordiIndex(const Site& in, const Site& out) const$/;"	f	class:Lattice
Coordinate	lattice/lattice.h	/^    Vec<int> Coordinate;$/;"	m	class:Site
Copy	utility/pyglue/object.cpp	/^Object Object::Copy() const$/;"	f	class:Python::Object
CopyToArray	utility/vector.h	/^    void CopyToArray(T* target) const$/;"	f	class:Vec
Counter	module/markov/markov.h	/^    long long* Counter;$/;"	m	class:mc::Markov
Counter	module/parameter/parameter.h	/^    long long Counter;$/;"	m	class:para::ParaMC
CreateWorm	module/markov/markov.cpp	/^void Markov::CreateWorm()$/;"	f	class:Markov
D	utility/convention.h	/^const int D = 3;$/;"	v
DEBUGMODE	utility/convention.h	/^const bool DEBUGMODE = false;$/;"	v
DELETE_WORM	module/markov/markov.h	/^        DELETE_WORM,$/;"	e	enum:mc::Markov::Operations
DELTA	module/weight/weight_array.h	/^const std::string DELTA = "DeltaT";$/;"	m	namespace:weight
DELTA_T_SIZE	module/weight/index_map.h	/^const uint DELTA_T_SIZE = 5;$/;"	m	namespace:weight
DEL_DELTA_INTERACTION	module/markov/markov.h	/^        DEL_DELTA_INTERACTION,$/;"	e	enum:mc::Markov::Operations
DEL_INTERACTION	module/markov/markov.h	/^        DEL_INTERACTION,$/;"	e	enum:mc::Markov::Operations
DOWN	utility/convention.h	/^enum spin { DOWN,$/;"	e	enum:spin
Data	module/weight/weight_array.h	/^    Complex* Data() { return _Data; }$/;"	f	class:weight::WeightArray
Data	utility/pyglue/pyarraywrapper.cpp	/^Complex* ArrayObject::Data<Complex>()$/;"	f	class:Python::ArrayObject
Data	utility/pyglue/pyarraywrapper.cpp	/^real* ArrayObject::Data<real>()$/;"	f	class:Python::ArrayObject
DecreaseRef	utility/pyglue/object.cpp	/^void DecreaseRef(PyObject* obj)$/;"	f	namespace:Python
Delay	utility/abort.cpp	/^void InterruptHandler::Delay()$/;"	f	class:InterruptHandler
DeleteDeltaInteraction	module/markov/markov.cpp	/^void Markov::DeleteDeltaInteraction()$/;"	f	class:Markov
DeleteInteraction	module/markov/markov.cpp	/^void Markov::DeleteInteraction()$/;"	f	class:Markov
DeleteSavedFiles	environment/envMonteCarlo.cpp	/^void EnvMonteCarlo::DeleteSavedFiles()$/;"	f	class:EnvMonteCarlo
DeleteWorm	module/markov/markov.cpp	/^void Markov::DeleteWorm()$/;"	f	class:Markov
DeltaTArray	module/weight/component.h	/^typedef WeightArray<DELTA_T_SIZE> DeltaTArray;$/;"	t	namespace:weight
Destroy	utility/pyglue/object.cpp	/^void Object::Destroy()$/;"	f	class:Python::Object
Diag	environment/environment.h	/^    diag::Diagram Diag;$/;"	m	class:EnvMonteCarlo
Diag	module/markov/markov.h	/^    diag::Diagram* Diag;$/;"	m	class:mc::Markov
Diag	module/markov/markov_monitor.h	/^    diag::Diagram *Diag;$/;"	m	class:mc::MarkovMonitor
Diagram	module/diagram/diagram.cpp	/^Diagram::Diagram()$/;"	f	class:Diagram
Diagram	module/diagram/diagram.h	/^class Diagram {$/;"	c	namespace:diag
Dictionary	utility/dictionary.h	/^    Dictionary()$/;"	f	class:Dictionary
Dictionary	utility/dictionary.h	/^    Dictionary(const std::string& key, const T& value)$/;"	f	class:Dictionary
Dictionary	utility/dictionary.h	/^    Dictionary(const std::string& script)$/;"	f	class:Dictionary
Dictionary	utility/dictionary.h	/^class Dictionary : public Python::ITypeCast {$/;"	c
Dim	module/weight/index_map.h	/^enum Dim {$/;"	g	namespace:weight
Dim	utility/pyglue/pyarraywrapper.cpp	/^int ArrayObject::Dim()$/;"	f	class:Python::ArrayObject
Dimension	lattice/lattice.h	/^    int Dimension;$/;"	m	class:Lattice
Dir	module/diagram/component.h	/^    int Dir;$/;"	m	class:diag::Vertex
DiskWriterTimer	module/parameter/parameter.h	/^    int DiskWriterTimer;$/;"	m	class:para::ParaMC
Dismiss	utility/scopeguard.h	/^    void Dismiss()$/;"	f	class:ScopeGuard
DoesFileExist	utility/utility.cpp	/^bool DoesFileExist(const string& FileName)$/;"	f
DoesLoad	job/job.h	/^    bool DoesLoad;$/;"	m	class:para::Job
Dyson	job/inlist_template.py	/^Dyson={$/;"	v
END	module/markov/markov.h	/^        END$/;"	e	enum:mc::Markov::Operations
ERROR	utility/logger.h	/^                ERROR,$/;"	e	enum:LogLevel
EXCEPTION	utility/abort.h	16;"	d
EnvMonteCarlo	environment/envMonteCarlo.cpp	/^EnvMonteCarlo::EnvMonteCarlo(const para::Job& job, bool IsAllTauSymmetric)$/;"	f	class:EnvMonteCarlo
EnvMonteCarlo	environment/environment.h	/^class EnvMonteCarlo {$/;"	c
Equal	utility/complex.h	/^inline bool Equal(const Complex& c1, const Complex& c2, real eps = eps0)$/;"	f
Equal	utility/complex.h	/^inline bool Equal(const Complex& c1, real r, real i, real eps = eps0)$/;"	f
Equal	utility/utility.cpp	/^bool Equal(real x1, real x2, real eps)$/;"	f
Equal	utility/utility.cpp	/^bool Equal(uint x1, uint x2, real eps)$/;"	f
Equal	utility/utility.h	/^bool Equal(const T* x1, const T* x2, uint num, real eps = eps0)$/;"	f
Error	estimator/estimator.h	/^    T Error;$/;"	m	class:Estimate
Estimate	estimator/estimator.cpp	/^Estimate<T> Estimator<T>::Estimate()$/;"	f	class:Estimator
Estimate	estimator/estimator.cpp	/^Estimate<T>::Estimate()$/;"	f	class:Estimate
Estimate	estimator/estimator.cpp	/^Estimate<T>::Estimate(const T& mean, const T& error)$/;"	f	class:Estimate
Estimate	estimator/estimator.h	/^class Estimate {$/;"	c
Estimator	estimator/estimator.cpp	/^Estimator<T>::Estimator()$/;"	f	class:Estimator
Estimator	estimator/estimator.cpp	/^Estimator<T>::Estimator(string name)$/;"	f	class:Estimator
Estimator	estimator/estimator.h	/^class Estimator {$/;"	c
Estimator	module/weight/component.h	/^    WeightEstimator Estimator;$/;"	m	class:weight::Polar
Estimator	module/weight/component.h	/^    WeightEstimator Estimator;$/;"	m	class:weight::Sigma
EstimatorBundle	estimator/estimator.h	/^class EstimatorBundle {$/;"	c
EstimatorT	estimator/estimator.h	/^    typedef Estimator<T> EstimatorT;$/;"	t	class:EstimatorBundle
EstimatorsKey	environment/envMonteCarlo.cpp	/^const string EstimatorsKey = "Estimators";$/;"	v
EvalScript	utility/pyglue/pywrapper.cpp	/^void AnyObject::EvalScript(const std::string& script)$/;"	f	class:Python::AnyObject
Exist	module/diagram/component.h	/^    bool Exist;$/;"	m	class:diag::WormClass
Exist	module/diagram/component_bundle.cpp	/^bool Bundle<T>::Exist(T *target)$/;"	f	class:Bundle
FLIP	utility/convention.h	27;"	d
Fermion_Simulator_random_h	utility/rng.h	10;"	d
Feynman_Simulator_convention_h	utility/convention.h	10;"	d
Feynman_Simulator_scopeguard_h	utility/scopeguard.h	10;"	d
Feynman_Simulator_type_cast_interface_h	utility/pyglue/type_cast_interface.h	10;"	d
Finalize	utility/pyglue/object.cpp	/^void Finalize()$/;"	f	namespace:Python
FixDiagram	module/diagram/diagram.cpp	/^bool Diagram::FixDiagram()$/;"	f	class:Diagram
FlipSpin	module/diagram/component.cpp	/^void GLine::FlipSpin()$/;"	f	class:GLine
Free	module/weight/weight_array.cpp	/^void WeightArray<DIM>::Free()$/;"	f	class:weight::WeightArray
FromDict	estimator/estimator.cpp	/^bool Estimator<T>::FromDict(const Dictionary& dict)$/;"	f	class:Estimator
FromDict	estimator/estimator.cpp	/^bool EstimatorBundle<T>::FromDict(const Dictionary& dict, bool AllowFailure)$/;"	f	class:EstimatorBundle
FromDict	module/diagram/diagram_IO.cpp	/^bool Diagram::FromDict(const Dictionary& Config)$/;"	f	class:Diagram
FromDict	module/diagram/diagram_IO.cpp	/^bool Diagram::FromDict(const Dictionary& dict, Lattice& lat, weight::G& g, weight::W& w)$/;"	f	class:Diagram
FromDict	module/markov/markov_monitor.cpp	/^bool MarkovMonitor::FromDict(const Dictionary &dict, ParaMC &para, Diagram &diag, weight::Weight &weight)$/;"	f	class:MarkovMonitor
FromDict	module/parameter/parameter.cpp	/^bool ParaMC::FromDict(const Dictionary& Para)$/;"	f	class:ParaMC
FromDict	module/weight/component.cpp	/^bool G::FromDict(const Dictionary& dict)$/;"	f	class:G
FromDict	module/weight/component.cpp	/^bool Polar::FromDict(const Dictionary& dict)$/;"	f	class:Polar
FromDict	module/weight/component.cpp	/^bool Sigma::FromDict(const Dictionary& dict)$/;"	f	class:Sigma
FromDict	module/weight/component.cpp	/^bool W::FromDict(const Dictionary& dict)$/;"	f	class:W
FromDict	module/weight/weight.cpp	/^bool weight::Weight::FromDict(const Dictionary &dict, flag _flag, const para::ParaMC &para)$/;"	f	class:weight::Weight
FromDict	module/weight/weight_array.cpp	/^bool WeightArray<DIM>::FromDict(const Dictionary& dict)$/;"	f	class:weight::WeightArray
FromDict	module/weight/weight_estimator.cpp	/^bool WeightEstimator::FromDict(const Dictionary& dict)$/;"	f	class:WeightEstimator
FromPy	utility/dictionary.cpp	/^bool Dictionary::FromPy(const Object& obj)$/;"	f	class:Dictionary
G	module/diagram/diagram.h	/^    Bundle<GLine> G;$/;"	m	class:diag::Diagram
G	module/markov/markov.h	/^    weight::G* G;$/;"	m	class:mc::Markov
G	module/weight/component.cpp	/^G::G(const Lattice& lat, real beta, uint MaxTauBin, TauSymmetry Symmetry)$/;"	f	class:G
G	module/weight/component.h	/^class G {$/;"	c	namespace:weight
G	module/weight/weight.h	/^    G* G;$/;"	m	class:weight::Weight
GET	utility/dictionary.h	20;"	d
GET_WITH_DEFAULT	utility/dictionary.h	21;"	d
GHash	module/diagram/diagram.h	/^    bool GHash[2 * MAX_K + 1];$/;"	m	class:diag::Diagram
GHashCheck	module/diagram/diagram.cpp	/^bool Diagram::GHashCheck(Momentum k)$/;"	f	class:Diagram
GLine	module/diagram/component.h	/^class GLine {$/;"	c	namespace:diag
GLineStyle	module/diagram/diagram_IO.cpp	/^string GLineStyle(bool IsMeasure, spin in, spin out)$/;"	f
GMeasure	module/diagram/diagram.h	/^    gLine GMeasure;$/;"	m	class:diag::Diagram
GW	module/weight/weight.h	/^flag GW = 2;$/;"	m	namespace:weight
GWeight	module/diagram/diagram.h	/^    weight::G* GWeight;$/;"	m	class:diag::Diagram
GenerateMessage	module/parameter/parameter.cpp	/^Message Parameter::GenerateMessage()$/;"	f	class:Parameter
Get	utility/dictionary.h	/^    T Get(const std::string& key) const$/;"	f	class:Dictionary
Get	utility/dictionary.h	/^    void Get(const std::string& key, T& value) const$/;"	f	class:Dictionary
Get	utility/pyglue/object.cpp	/^PyObject* Object::Get(OwnerShip os) const$/;"	f	class:Python::Object
GetAttr	utility/pyglue/pywrapper.cpp	/^Object ModuleObject::GetAttr(const std::string& name)$/;"	f	class:Python::ModuleObject
GetDim	module/weight/weight_array.h	/^    uint GetDim() const { return DIM; }$/;"	f	class:weight::WeightArray
GetIndex	module/weight/index_map.cpp	/^uint IndexMapSPIN2::GetIndex(spin in, spin out, const Site& rin, const Site& rout,$/;"	f	class:IndexMapSPIN2
GetIndex	module/weight/index_map.cpp	/^uint IndexMapSPIN2::GetIndex(spin in, spin out,$/;"	f	class:IndexMapSPIN2
GetIndex	module/weight/index_map.cpp	/^uint IndexMapSPIN4::GetIndex(const spin* SpinIn, const spin* SpinOut, const Site& rin, const Site& rout) const$/;"	f	class:IndexMapSPIN4
GetIndex	module/weight/index_map.cpp	/^uint IndexMapSPIN4::GetIndex(const spin* SpinIn, const spin* SpinOut, const Site& rin, const Site& rout, real tin, real tout) const$/;"	f	class:IndexMapSPIN4
GetPyErrorStr	utility/pyglue/object.cpp	/^std::string GetPyErrorStr()$/;"	f	namespace:Python
GetShape	module/weight/index_map.cpp	/^const uint* IndexMap::GetShape() const$/;"	f	class:IndexMap
GetShape	module/weight/weight_array.h	/^    const uint* GetShape() const { return _Shape; }$/;"	f	class:weight::WeightArray
GetSize	module/weight/weight_array.h	/^    uint GetSize() const { return _Size; }$/;"	f	class:weight::WeightArray
GetTauSymmetryFactor	module/weight/index_map.cpp	/^int IndexMap::GetTauSymmetryFactor(real t_in, real t_out) const$/;"	f	class:IndexMap
HAVE_SPUT_H	utility/sput.h	47;"	d
HasAttr	utility/pyglue/pywrapper.cpp	/^bool ModuleObject::HasAttr(const std::string& name)$/;"	f	class:Python::ModuleObject
HasKey	utility/dictionary.cpp	/^bool Dictionary::HasKey(const std::string& key) const$/;"	f	class:Dictionary
HelpStr	main.cpp	/^const string HelpStr = "Usage:"$/;"	v
HistKey	environment/envMonteCarlo.cpp	/^const string HistKey = "Histogram";$/;"	v
Hop	module/markov/markov.cpp	/^void Markov::Hop(int sweep)$/;"	f	class:Markov
HowMany	estimator/estimator.cpp	/^int EstimatorBundle<T>::HowMany()$/;"	f	class:EstimatorBundle
HowMany	module/diagram/component_bundle.cpp	/^int Bundle<T>::HowMany()$/;"	f	class:Bundle
IN	utility/convention.h	/^const int IN = 0;$/;"	v
INFO	utility/logger.h	/^                INFO,$/;"	e	enum:LogLevel
INVERSE	utility/convention.h	37;"	d
IOInvalid	utility/abort.h	/^EXCEPTION(IOInvalid);$/;"	v
ITypeCast	utility/pyglue/type_cast_interface.h	/^class ITypeCast {$/;"	c	namespace:Python
Im	utility/complex.h	/^    real Im; \/\/ imaginary part$/;"	m	class:Complex
IncreaseRef	utility/pyglue/object.cpp	/^void IncreaseRef(PyObject* obj)$/;"	f	namespace:Python
Index2Vec	lattice/lattice.cpp	/^Vec<int> Lattice::Index2Vec(int index) const$/;"	f	class:Lattice
IndexInvalid	utility/abort.h	/^EXCEPTION(IndexInvalid);$/;"	v
IndexMap	module/weight/index_map.cpp	/^IndexMap::IndexMap(real Beta_, uint MaxTauBin_, const Lattice& lat, TauSymmetry Symmetry_)$/;"	f	class:IndexMap
IndexMap	module/weight/index_map.h	/^class IndexMap {$/;"	c	namespace:weight
IndexMapSPIN2	module/weight/index_map.cpp	/^IndexMapSPIN2::IndexMapSPIN2(real Beta, uint MaxTauBin, const Lattice& Lat, TauSymmetry Symmetry)$/;"	f	class:IndexMapSPIN2
IndexMapSPIN2	module/weight/index_map.h	/^class IndexMapSPIN2 : public IndexMap {$/;"	c	namespace:weight
IndexMapSPIN4	module/weight/index_map.cpp	/^IndexMapSPIN4::IndexMapSPIN4(real Beta, uint MaxTauBin, const Lattice& Lat, TauSymmetry Symmetry)$/;"	f	class:IndexMapSPIN4
IndexMapSPIN4	module/weight/index_map.h	/^class IndexMapSPIN4 : public IndexMap {$/;"	c	namespace:weight
IndexToTau	module/weight/index_map.cpp	/^real IndexMap::IndexToTau(int Bin) const$/;"	f	class:IndexMap
InitialArray	utility/utility.h	/^void InitialArray(T* target, T t, const int& size)$/;"	f
Initialize	lattice/lattice.cpp	/^void Lattice::Initialize(const Vec<int>& size, int NSublat)$/;"	f	class:Lattice
Initialize	utility/pyglue/object.cpp	/^void Initialize()$/;"	f	namespace:Python
InputFile	job/job.h	/^    std::string InputFile;$/;"	m	class:para::Job
InterruptHandler	utility/abort.cpp	/^InterruptHandler::InterruptHandler()$/;"	f	class:InterruptHandler
InterruptHandler	utility/abort.h	/^class InterruptHandler {$/;"	c
Ira	module/diagram/component.h	/^    vertex Ira, Masha; \/\/extra line: Ira---"k,dSpin"--->Masha$/;"	m	class:diag::WormClass
IsAllocated	module/weight/weight_array.h	/^    bool IsAllocated;$/;"	m	class:weight::WeightArray
IsDelaying	utility/abort.h	/^    bool IsDelaying() { return __IsDelaying; }$/;"	f	class:InterruptHandler
IsDelta	module/diagram/component.h	/^    bool IsDelta;$/;"	m	class:diag::WLine
IsEmpty	utility/dictionary.cpp	/^bool Dictionary::IsEmpty() const$/;"	f	class:Dictionary
IsInt	utility/pyglue/type_cast.cpp	/^bool IsInt(const Object& obj)$/;"	f	namespace:Python
IsMeasure	module/diagram/component.h	/^    bool IsMeasure;$/;"	m	class:diag::GLine
IsMeasure	module/diagram/component.h	/^    bool IsMeasure;$/;"	m	class:diag::WLine
IsSameSpin	module/weight/index_map.cpp	/^bool IndexMapSPIN2::IsSameSpin(int spindex)$/;"	f	class:IndexMapSPIN2
IsWorm	module/diagram/component.h	/^    bool IsWorm;$/;"	m	class:diag::WLine
IsWorm	module/diagram/diagram.cpp	/^bool Diagram::IsWorm(vertex v)$/;"	f	class:Diagram
IsZero	utility/complex.h	/^inline bool IsZero(const Complex& c)$/;"	f
JUMP_BACK_TO_ORDER1	module/markov/markov.h	/^        JUMP_BACK_TO_ORDER1,$/;"	e	enum:mc::Markov::Operations
JUMP_TO_ORDER0	module/markov/markov.h	/^        JUMP_TO_ORDER0,$/;"	e	enum:mc::Markov::Operations
Job	environment/environment.h	/^    para::Job Job;$/;"	m	class:EnvMonteCarlo
Job	job/job.cpp	/^para::Job::Job(string inputfile)$/;"	f	class:para::Job
Job	job/job.h	/^class Job {$/;"	c	namespace:para
JumpBackToOrder1	module/markov/markov.cpp	/^void Markov::JumpBackToOrder1()$/;"	f	class:Markov
JumpToOrder0	module/markov/markov.cpp	/^void Markov::JumpToOrder0()$/;"	f	class:Markov
K	module/diagram/component.h	/^    Momentum K;$/;"	m	class:diag::GLine
K	module/diagram/component.h	/^    Momentum K;$/;"	m	class:diag::WLine
K	module/diagram/component.h	/^    Momentum K;$/;"	m	class:diag::WormClass
K	utility/momentum.h	/^    int K; \/\/ member$/;"	m	class:Momentum
KeyInvalid	utility/abort.h	/^EXCEPTION(KeyInvalid);$/;"	v
L	lattice/lattice_test.cpp	/^int L[] = { 16, 32 };$/;"	v
L	module/parameter/parameter.h	/^    Vec<int> L;$/;"	m	class:para::Parameter
LOGGER	utility/logger.h	45;"	d
LOGGER_CONF	utility/logger.h	32;"	d
LOGGER_H	utility/logger.h	2;"	d
LOGSTR	utility/logger.h	/^const std::string LOGSTR[4] = { "[DEBUG]", "[INFO]", "[WARNING]", "[ERROR]" };$/;"	v
LOG_DEBUG	utility/logger.h	52;"	d
LOG_ERROR	utility/logger.h	55;"	d
LOG_INFO	utility/logger.h	53;"	d
LOG_WARNING	utility/logger.h	54;"	d
L_file_	utility/logger.h	/^                       L_file_ = 1 << 1,$/;"	e	enum:Logger::loggerConf_
L_nofile_	utility/logger.h	/^    enum loggerConf_ { L_nofile_ = 1 << 0,$/;"	e	enum:Logger::loggerConf_
L_noscreen_	utility/logger.h	/^                       L_noscreen_ = 1 << 2,$/;"	e	enum:Logger::loggerConf_
L_screen_	utility/logger.h	/^                       L_screen_ = 1 << 3 };$/;"	e	enum:Logger::loggerConf_
Lat	module/diagram/diagram.h	/^    Lattice* Lat;$/;"	m	class:diag::Diagram
Lat	module/markov/markov.h	/^    Lattice* Lat;$/;"	m	class:mc::Markov
Lat	module/parameter/parameter.h	/^    Lattice Lat;$/;"	m	class:para::Parameter
Lat	module/weight/index_map.h	/^    Lattice Lat;$/;"	m	class:weight::IndexMap
Lattice	lattice/lattice.cpp	/^Lattice::Lattice(const Vec<int>& size, int NSublat)$/;"	f	class:Lattice
Lattice	lattice/lattice.h	/^class Lattice {$/;"	c
Left	utility/utility.cpp	/^string Left(const string s, const int w)$/;"	f
ListenToMessage	environment/envMonteCarlo.cpp	/^bool EnvMonteCarlo::ListenToMessage()$/;"	f	class:EnvMonteCarlo
Load	environment/envMonteCarlo.cpp	/^bool EnvMonteCarlo::Load()$/;"	f	class:EnvMonteCarlo
Load	module/parameter/message.cpp	/^bool para::Message::Load(const string& FileName)$/;"	f	class:para::Message
Load	utility/dictionary.cpp	/^void Dictionary::Load(const std::string& FileName)$/;"	f	class:Dictionary
LoadFromString	utility/dictionary.cpp	/^void Dictionary::LoadFromString(const std::string& script)$/;"	f	class:Dictionary
LoadModule	utility/pyglue/pywrapper.cpp	/^void ModuleObject::LoadModule(const string& script_path)$/;"	f	class:Python::ModuleObject
LogFile	job/job.h	/^    std::string LogFile;$/;"	m	class:para::Job
LogLevel	utility/logger.h	/^enum LogLevel { MYDEBUG,$/;"	g
Logger	utility/logger.cpp	/^Logger::Logger()$/;"	f	class:Logger
Logger	utility/logger.h	/^class Logger {$/;"	c
MAX_BUNDLE	module/diagram/component_bundle.h	/^const int MAX_BUNDLE = 2 * MAX_ORDER;$/;"	m	namespace:diag
MAX_K	utility/momentum.h	/^const int MAX_K = 10000;$/;"	v
MAX_ORDER	utility/convention.h	/^const int MAX_ORDER = 10;$/;"	v
MOVE_WORM_G	module/markov/markov.h	/^        MOVE_WORM_G,$/;"	e	enum:mc::Markov::Operations
MOVE_WORM_W	module/markov/markov.h	/^        MOVE_WORM_W,$/;"	e	enum:mc::Markov::Operations
MYDEBUG	utility/logger.h	/^enum LogLevel { MYDEBUG,$/;"	e	enum:LogLevel
M_RAN_INVM32	utility/rng.h	16;"	d
M_RAN_INVM52	utility/rng.h	17;"	d
Macheps	utility/utility.h	/^const real Macheps = 2.22044604925031E-16; \/\/ for double$/;"	v
MakeSureNotNull	utility/pyglue/object.cpp	/^void Object::MakeSureNotNull()$/;"	f	class:Python::Object
Markov	environment/environment.h	/^    mc::Markov Markov;$/;"	m	class:EnvMonteCarlo
Markov	module/markov/markov.h	/^class Markov {$/;"	c	namespace:mc
MarkovMonitor	environment/environment.h	/^    mc::MarkovMonitor MarkovMonitor;$/;"	m	class:EnvMonteCarlo
MarkovMonitor	module/markov/markov_monitor.cpp	/^MarkovMonitor::MarkovMonitor()$/;"	f	class:MarkovMonitor
MarkovMonitor	module/markov/markov_monitor.h	/^class MarkovMonitor {$/;"	c	namespace:mc
Masha	module/diagram/component.h	/^    vertex Ira, Masha; \/\/extra line: Ira---"k,dSpin"--->Masha$/;"	m	class:diag::WormClass
MathUtils_H	utility/utility.h	8;"	d
MaxReal	utility/utility.h	/^const real MaxReal = 1.0e30;$/;"	v
MaxTauBin	module/parameter/parameter.h	/^    uint MaxTauBin;$/;"	m	class:para::Parameter
MaxTauBin	module/weight/index_map.h	/^    uint MaxTauBin;$/;"	m	class:weight::IndexMap
Mean	estimator/estimator.h	/^    T Mean;$/;"	m	class:Estimate
Measure	estimator/estimator.cpp	/^void Estimator<T>::Measure(const T& t)$/;"	f	class:Estimator
Measure	module/markov/markov_monitor.cpp	/^void MarkovMonitor::Measure()$/;"	f	class:MarkovMonitor
Measure	module/weight/component_MC.cpp	/^void Polar::Measure(const Site& rin, const Site& rout, real tin, real tout, spin* SpinIn, spin* SpinOut, int order, const Complex& weight)$/;"	f	class:Polar
Measure	module/weight/component_MC.cpp	/^void Sigma::Measure(const Site& rin, const Site& rout, real tin, real tout, spin SpinIn, spin SpinOut, int order, const Complex& weight)$/;"	f	class:Sigma
Measure	module/weight/weight_estimator.cpp	/^void WeightEstimator::Measure(uint WeightIndex, int Order, Complex weight)$/;"	f	class:WeightEstimator
MeasureGLine	module/diagram/diagram.h	/^    bool MeasureGLine;$/;"	m	class:diag::Diagram
MeasureNorm	module/weight/weight_estimator.cpp	/^void WeightEstimator::MeasureNorm(const Site& rin, const Site& rout, real tin, real tout, spin SpinIn, spin SpinOut, int order, const Complex& weight)$/;"	f	class:WeightEstimator
MemoryException	utility/abort.h	/^EXCEPTION(MemoryException);$/;"	v
Message	module/parameter/message.h	/^class Message {$/;"	c	namespace:para
MessageFile	job/job.h	/^    std::string MessageFile;$/;"	m	class:para::Job
MessageTimer	module/parameter/parameter.h	/^    int MessageTimer;$/;"	m	class:para::ParaMC
MinReal	utility/utility.h	/^const real MinReal = -1.0e30;$/;"	v
ModuleObject	utility/pyglue/pywrapper.cpp	/^ModuleObject::ModuleObject(const Object& obj)$/;"	f	class:Python::ModuleObject
ModuleObject	utility/pyglue/pywrapper.h	/^    ModuleObject()$/;"	f	class:Python::ModuleObject
ModuleObject	utility/pyglue/pywrapper.h	/^class ModuleObject : Object {$/;"	c	namespace:Python
Momentum	utility/momentum.cpp	/^Momentum::Momentum()$/;"	f	class:Momentum
Momentum	utility/momentum.cpp	/^Momentum::Momentum(const Momentum& m)$/;"	f	class:Momentum
Momentum	utility/momentum.cpp	/^Momentum::Momentum(int k)$/;"	f	class:Momentum
Momentum	utility/momentum.h	/^class Momentum{$/;"	c
MonteCarlo	job/inlist_template.py	/^MonteCarlo={$/;"	v
MonteCarlo	main.cpp	/^void MonteCarlo(const para::Job& Job)$/;"	f
MoveWormOnG	module/markov/markov.cpp	/^void Markov::MoveWormOnG()$/;"	f	class:Markov
MoveWormOnW	module/markov/markov.cpp	/^void Markov::MoveWormOnW()$/;"	f	class:Markov
NAME	module/markov/markov.cpp	26;"	d	file:
NDEBUG	utility/convention.h	15;"	d
NSublat	module/parameter/parameter.h	/^    int NSublat;$/;"	m	class:para::Parameter
NUpdates	module/markov/markov.h	/^const int NUpdates = 19;$/;"	m	namespace:mc
Name	estimator/estimator.h	/^    std::string Name;$/;"	m	class:Estimator
Name	module/diagram/component.h	/^    name Name;$/;"	m	class:diag::GLine
Name	module/diagram/component.h	/^    name Name;$/;"	m	class:diag::Vertex
Name	module/diagram/component.h	/^    name Name;$/;"	m	class:diag::WLine
NeighG	module/diagram/component.cpp	/^gLine Vertex::NeighG(int dir)$/;"	f	class:Vertex
NeighVer	module/diagram/component.cpp	/^vertex GLine::NeighVer(int dir)$/;"	f	class:GLine
NeighVer	module/diagram/component.cpp	/^vertex WLine::NeighVer(int dir)$/;"	f	class:WLine
NeighW	module/diagram/component.cpp	/^wLine Vertex::NeighW()$/;"	f	class:Vertex
NewRef	utility/pyglue/object.h	/^    NewRef,$/;"	e	enum:Python::OwnerShip
NoRef	utility/pyglue/object.h	/^    NoRef$/;"	e	enum:Python::OwnerShip
Norm	estimator/estimator.cpp	/^real Estimator<T>::Norm()$/;"	f	class:Estimator
Norm	module/weight/component.h	/^class Norm {$/;"	c	namespace:weight
NormFactor	module/weight/component.h	/^    static real NormFactor;$/;"	m	class:weight::Norm
ON_SCOPE_EXIT	utility/scopeguard.h	16;"	d
OUT	utility/convention.h	/^const int OUT = 1;$/;"	v
Object	utility/pyglue/object.cpp	/^Object::Object(PyObject* obj, OwnerShip os)$/;"	f	class:Python::Object
Object	utility/pyglue/object.cpp	/^Object::Object(const Object& obj)$/;"	f	class:Python::Object
Object	utility/pyglue/object.h	/^    Object()$/;"	f	class:Python::Object
Object	utility/pyglue/object.h	/^class Object {$/;"	c	namespace:Python
OperationName	module/markov/markov.h	/^    std::string OperationName[NUpdates];$/;"	m	class:mc::Markov
Operations	module/markov/markov.h	/^    enum Operations {$/;"	g	class:mc::Markov
Order	module/diagram/diagram.h	/^    int Order;$/;"	m	class:diag::Diagram
Order	module/markov/markov.h	/^    int Order;$/;"	m	class:mc::Markov
Order	module/parameter/parameter.h	/^    int Order;$/;"	m	class:para::Parameter
OrderReWeight	module/markov/markov.h	/^    real* OrderReWeight;$/;"	m	class:mc::Markov
OrderReWeight	module/parameter/parameter.h	/^    std::vector<real> OrderReWeight;$/;"	m	class:para::ParaMC
OrderTimeRatio	module/parameter/parameter.h	/^    std::vector<real> OrderTimeRatio;$/;"	m	class:para::ParaMC
OwnerShip	utility/pyglue/object.h	/^enum OwnerShip {$/;"	g	namespace:Python
PI	utility/convention.h	/^const real PI = 3.1415926535897932384626433832795;$/;"	v
PID	job/job.h	/^    int PID;$/;"	m	class:para::Job
PYWRAPPER_H	utility/pyglue/pywrapper.h	22;"	d
Para	environment/environment.h	/^    para::ParaMC Para;$/;"	m	class:EnvMonteCarlo
Para	module/markov/markov_monitor.h	/^    para::ParaMC *Para;$/;"	m	class:mc::MarkovMonitor
ParaFile	job/job.h	/^    std::string ParaFile;$/;"	m	class:para::Job
ParaKey	environment/envMonteCarlo.cpp	/^const string ParaKey = "Para";$/;"	v
ParaMC	module/parameter/parameter.h	/^class ParaMC : public Parameter {$/;"	c	namespace:para
Parameter	module/parameter/parameter.h	/^class Parameter {$/;"	c	namespace:para
Phase	module/diagram/diagram.h	/^    Complex Phase, Weight;$/;"	m	class:diag::Diagram
PhyEstimator	module/markov/markov_monitor.h	/^    EstimatorBundle<real> PhyEstimator;$/;"	m	class:mc::MarkovMonitor
Polar	module/markov/markov.h	/^    weight::Polar* Polar;$/;"	m	class:mc::Markov
Polar	module/weight/component.cpp	/^Polar::Polar(const Lattice& lat, real Beta, uint MaxTauBin, int MaxOrder, real Norm)$/;"	f	class:Polar
Polar	module/weight/component.h	/^class Polar {$/;"	c	namespace:weight
Polar	module/weight/weight.h	/^    Polar* Polar;$/;"	m	class:weight::Weight
PolarEstimator	module/markov/markov_monitor.h	/^    Estimator<real> SigmaEstimator, PolarEstimator;$/;"	m	class:mc::MarkovMonitor
PolarReweight	module/markov/markov.h	/^    real* PolarReweight;$/;"	m	class:mc::Markov
PolarReweight	module/parameter/parameter.h	/^    real PolarReweight;$/;"	m	class:para::ParaMC
PrettyString	module/diagram/component.cpp	/^string GLine::PrettyString()$/;"	f	class:GLine
PrettyString	module/diagram/component.cpp	/^string Vertex::PrettyString()$/;"	f	class:Vertex
PrettyString	module/diagram/component.cpp	/^string WLine::PrettyString()$/;"	f	class:WLine
PrettyString	module/diagram/component.cpp	/^string WormClass::PrettyString()$/;"	f	class:WormClass
PrettyString	module/parameter/message.cpp	/^std::string para::Message::PrettyString()$/;"	f	class:para::Message
PrettyString	utility/dictionary.cpp	/^std::string Dictionary::PrettyString() const$/;"	f	class:Dictionary
PrettyString	utility/pyglue/object.cpp	/^std::string Object::PrettyString()$/;"	f	class:Python::Object
PrettyString	utility/vector.cpp	/^string Vec<T>::PrettyString()$/;"	f	class:Vec
Print	utility/dictionary.cpp	/^void Dictionary::Print() const$/;"	f	class:Dictionary
Print	utility/pyglue/object.cpp	/^void Object::Print() const$/;"	f	class:Python::Object
PrintDetailBalanceInfo	module/markov/markov.cpp	/^void Markov::PrintDetailBalanceInfo()$/;"	f	class:Markov
PrintError	utility/pyglue/object.cpp	/^void PrintError()$/;"	f	namespace:Python
PrintPyObject	utility/pyglue/object.cpp	/^void PrintPyObject(PyObject* obj)$/;"	f	namespace:Python
PrinterTimer	module/parameter/parameter.h	/^    int PrinterTimer;$/;"	m	class:para::ParaMC
ProbSite	module/markov/markov.cpp	/^real Markov::ProbSite(const Site &site)$/;"	f	class:Markov
ProbTau	module/markov/markov.cpp	/^real Markov::ProbTau(real tau)$/;"	f	class:Markov
ProbofCall	module/markov/markov.h	/^    real ProbofCall[NUpdates];$/;"	m	class:mc::Markov
PropagatePyError	utility/pyglue/object.cpp	/^void PropagatePyError()$/;"	f	namespace:Python
Proposed	module/markov/markov.h	/^    real Proposed[NUpdates][MAX_ORDER];$/;"	m	class:mc::Markov
PyObject	utility/pyglue/object.h	/^typedef _object PyObject;$/;"	t
Python	utility/pyglue/object.cpp	/^namespace Python {$/;"	n	file:
Python	utility/pyglue/object.h	/^namespace Python {$/;"	n
Python	utility/pyglue/pyarraywrapper.cpp	/^namespace Python {$/;"	n	file:
Python	utility/pyglue/pyarraywrapper.h	/^namespace Python {$/;"	n
Python	utility/pyglue/pywrapper.cpp	/^namespace Python {$/;"	n	file:
Python	utility/pyglue/pywrapper.h	/^namespace Python {$/;"	n
Python	utility/pyglue/type_cast.cpp	/^namespace Python {$/;"	n	file:
Python	utility/pyglue/type_cast.h	/^namespace Python {$/;"	n
Python	utility/pyglue/type_cast_interface.h	/^namespace Python {$/;"	n
PythonMap	utility/dictionary.h	/^typedef std::map<std::string, Python::AnyObject> PythonMap;$/;"	t
R	module/diagram/component.h	/^    Site R;$/;"	m	class:diag::Vertex
RANDBL_32	utility/rng.h	23;"	d
RANDBL_32_NO_ZERO	utility/rng.h	26;"	d
RANDBL_52_NO_ZERO	utility/rng.h	30;"	d
RECONNECT	module/markov/markov.h	/^        RECONNECT,$/;"	e	enum:mc::Markov::Operations
RNG	module/markov/markov.h	/^    RandomFactory* RNG;$/;"	m	class:mc::Markov
RNG	module/parameter/parameter.h	/^    RandomFactory RNG;$/;"	m	class:para::ParaMC
RNG	utility/rng.cpp	/^RandomFactory RNG;$/;"	v
RandomFactory	utility/rng.cpp	/^RandomFactory::RandomFactory()$/;"	f	class:RandomFactory
RandomFactory	utility/rng.cpp	/^RandomFactory::RandomFactory(const std::string& state)$/;"	f	class:RandomFactory
RandomFactory	utility/rng.cpp	/^RandomFactory::RandomFactory(int seed)$/;"	f	class:RandomFactory
RandomFactory	utility/rng.h	/^class RandomFactory {$/;"	c
RandomPick	module/diagram/component_bundle.cpp	/^T *Bundle<T>::RandomPick(RandomFactory &RNG)$/;"	f	class:Bundle
RandomPickBool	module/markov/markov.cpp	/^bool Markov::RandomPickBool()$/;"	f	class:Markov
RandomPickDeltaSpin	module/markov/markov.cpp	/^int Markov::RandomPickDeltaSpin()$/;"	f	class:Markov
RandomPickDir	module/markov/markov.cpp	/^int Markov::RandomPickDir()$/;"	f	class:Markov
RandomPickK	module/markov/markov.cpp	/^Momentum Markov::RandomPickK()$/;"	f	class:Markov
RandomPickSite	module/markov/markov.cpp	/^Site Markov::RandomPickSite()$/;"	f	class:Markov
RandomPickSpin	module/markov/markov.cpp	/^spin Markov::RandomPickSpin()$/;"	f	class:Markov
RandomPickTau	module/markov/markov.cpp	/^real Markov::RandomPickTau()$/;"	f	class:Markov
Ratio	estimator/estimator.cpp	/^real Estimator<T>::Ratio()$/;"	f	class:Estimator
Re	utility/complex.h	/^    real Re; \/\/ real part$/;"	m	class:Complex
Reconnect	module/markov/markov.cpp	/^void Markov::Reconnect()$/;"	f	class:Markov
Recover	module/diagram/component_bundle.cpp	/^void Bundle<T>::Recover(int step)$/;"	f	class:Bundle
RefCount	utility/pyglue/object.cpp	/^long Object::RefCount() const$/;"	f	class:Python::Object
RelativeError	estimator/estimator.cpp	/^Complex Estimate<Complex>::RelativeError()$/;"	f	class:Estimate
RelativeError	estimator/estimator.cpp	/^real Estimate<real>::RelativeError()$/;"	f	class:Estimate
Remove	module/diagram/component_bundle.cpp	/^void Bundle<T>::Remove(T *target)$/;"	f	class:Bundle
Remove	module/diagram/component_bundle.cpp	/^void Bundle<T>::Remove(name name)$/;"	f	class:Bundle
RemoveGHash	module/diagram/diagram.cpp	/^void Diagram::RemoveGHash(Momentum k)$/;"	f	class:Diagram
RemoveWHash	module/diagram/diagram.cpp	/^void Diagram::RemoveWHash(Momentum k)$/;"	f	class:Diagram
ReplaceGHash	module/diagram/diagram.cpp	/^void Diagram::ReplaceGHash(Momentum kold, Momentum k)$/;"	f	class:Diagram
ReplaceWHash	module/diagram/diagram.cpp	/^void Diagram::ReplaceWHash(Momentum kold, Momentum k)$/;"	f	class:Diagram
Reset	module/diagram/diagram.cpp	/^void Diagram::Reset(Lattice& lat, weight::G& g, weight::W& w)$/;"	f	class:Diagram
Reset	module/markov/markov.cpp	/^void Markov::Reset(ParaMC &para, Diagram &diag, weight::Weight &weight)$/;"	f	class:Markov
Reset	module/markov/markov_monitor.cpp	/^void MarkovMonitor::Reset(ParaMC &para, Diagram &diag, weight::Weight &weight)$/;"	f	class:MarkovMonitor
Reset	module/weight/component.cpp	/^void G::Reset(real Beta)$/;"	f	class:G
Reset	module/weight/component.cpp	/^void Polar::Reset(real Beta)$/;"	f	class:Polar
Reset	module/weight/component.cpp	/^void Sigma::Reset(real Beta)$/;"	f	class:Sigma
Reset	module/weight/component.cpp	/^void W::Reset(real Beta)$/;"	f	class:W
Reset	utility/rng.cpp	/^void RandomFactory::Reset()$/;"	f	class:RandomFactory
Reset	utility/rng.cpp	/^void RandomFactory::Reset(const std::string& state)$/;"	f	class:RandomFactory
Reset	utility/rng.cpp	/^void RandomFactory::Reset(int seed)$/;"	f	class:RandomFactory
Resume	utility/abort.cpp	/^void InterruptHandler::Resume()$/;"	f	class:InterruptHandler
ReweightTimer	module/parameter/parameter.h	/^    int ReweightTimer;$/;"	m	class:para::ParaMC
Right	utility/utility.cpp	/^string Right(const string s, const int w)$/;"	f
RunTest	test.cpp	/^int RunTest()$/;"	f
RunTimeException	utility/abort.h	/^EXCEPTION(RunTimeException);$/;"	v
SCOPEGUARD_LINENAME	utility/scopeguard.h	15;"	d
SCOPEGUARD_LINENAME_CAT	utility/scopeguard.h	14;"	d
SEP	utility/vector.cpp	11;"	d	file:
SET	utility/dictionary.h	19;"	d
SIGN	module/markov/markov.cpp	25;"	d	file:
SIZE	estimator/estimator.h	17;"	d
SLEEP	job/inlist_template.py	/^SLEEP = 1    #check job status for every SLEEP seconds$/;"	v
SMOOTH	module/weight/weight_array.h	/^const std::string SMOOTH = "SmoothT";$/;"	m	namespace:weight
SMOOTH_T_SIZE	module/weight/index_map.h	/^const uint SMOOTH_T_SIZE = 6;$/;"	m	namespace:weight
SP1	module/weight/index_map.h	/^    SP1 = 0,$/;"	e	enum:weight::Dim
SP2	module/weight/index_map.h	/^    SP2,$/;"	e	enum:weight::Dim
SPIN	utility/convention.h	/^const int SPIN = 2;$/;"	v
SPIN2	module/weight/weight_array.h	/^    SPIN2 = 2,$/;"	e	enum:weight::SpinNum
SPIN2	utility/convention.h	/^const int SPIN2 = SPIN * SPIN;$/;"	v
SPIN3	utility/convention.h	/^const int SPIN3 = SPIN2 * SPIN;$/;"	v
SPIN4	module/weight/weight_array.h	/^    SPIN4 = 4$/;"	e	enum:weight::SpinNum
SPIN4	utility/convention.h	/^const int SPIN4 = SPIN2 * SPIN2;$/;"	v
SPIN4Filter	module/weight/index_map.h	/^enum SPIN4Filter { UpUp2UpUp,$/;"	g	namespace:weight
SPINUPUP	module/weight/component_MC.cpp	/^const spin SPINUPUP[2] = { UP, UP };$/;"	v
SPUT_DEFAULT_CHECK_NAME	utility/sput.h	68;"	d
SPUT_DEFAULT_SUITE_NAME	utility/sput.h	67;"	d
SPUT_INITIALIZED	utility/sput.h	70;"	d
SPUT_VERSION_MAJOR	utility/sput.h	62;"	d
SPUT_VERSION_MINOR	utility/sput.h	63;"	d
SPUT_VERSION_PATCH	utility/sput.h	64;"	d
SPUT_VERSION_STRING	utility/sput.h	65;"	d
SUB1	module/weight/index_map.h	/^    SUB1,$/;"	e	enum:weight::Dim
SUB2	module/weight/index_map.h	/^    SUB2,$/;"	e	enum:weight::Dim
Sample	job/job.h	/^    int Sample;$/;"	m	class:para::Job
Save	environment/envMonteCarlo.cpp	/^void EnvMonteCarlo::Save()$/;"	f	class:EnvMonteCarlo
Save	module/parameter/message.cpp	/^void para::Message::Save(const string& FileName)$/;"	f	class:para::Message
Save	utility/dictionary.cpp	/^void Dictionary::Save(const string& FileName, const std::string& Mode)$/;"	f	class:Dictionary
ScopeGuard	utility/scopeguard.h	/^    explicit ScopeGuard(std::function<void()> onExitScope)$/;"	f	class:ScopeGuard
ScopeGuard	utility/scopeguard.h	/^class ScopeGuard {$/;"	c
Seed	module/parameter/parameter.h	/^    int Seed;$/;"	m	class:para::ParaMC
SetDiagCounter	module/weight/weight.cpp	/^void weight::Weight::SetDiagCounter(const ParaMC &para)$/;"	f	class:weight::Weight
SetGLine	module/diagram/component.cpp	/^void GLine::SetGLine(Momentum k, const Complex &weight, bool ismeasure)$/;"	f	class:GLine
SetSpin	module/diagram/component.cpp	/^void Vertex::SetSpin(spin *_spin_)$/;"	f	class:Vertex
SetTest	module/diagram/diagram_IO.cpp	/^void Diagram::SetTest(Lattice& lat, weight::G& g, weight::W& w)$/;"	f	class:Diagram
SetTest	module/parameter/parameter.cpp	/^void ParaMC::SetTest()$/;"	f	class:ParaMC
SetTest	module/weight/weight.cpp	/^void weight::Weight::SetTest(const ParaMC &para)$/;"	f	class:weight::Weight
SetVertex	module/diagram/component.cpp	/^void Vertex::SetVertex(const Site &site, const real &tau, spin *s, int dir)$/;"	f	class:Vertex
SetWLine	module/diagram/component.cpp	/^void WLine::SetWLine(Momentum k, const Complex &weight, bool isworm, bool ismeasure, bool isdelta)$/;"	f	class:WLine
Shape	utility/pyglue/pyarraywrapper.cpp	/^std::vector<uint> ArrayObject::Shape()$/;"	f	class:Python::ArrayObject
Shift	lattice/lattice.cpp	/^void Lattice::Shift(Vec<int>& vec) const$/;"	f	class:Lattice
Shift	utility/momentum.cpp	/^int Shift(int k)$/;"	f
Sigma	module/markov/markov.h	/^    weight::Sigma* Sigma;$/;"	m	class:mc::Markov
Sigma	module/weight/component.cpp	/^Sigma::Sigma(const Lattice& lat, real Beta, uint MaxTauBin,$/;"	f	class:Sigma
Sigma	module/weight/component.h	/^class Sigma {$/;"	c	namespace:weight
Sigma	module/weight/weight.h	/^    Sigma* Sigma;$/;"	m	class:weight::Weight
SigmaEstimator	module/markov/markov_monitor.h	/^    Estimator<real> SigmaEstimator, PolarEstimator;$/;"	m	class:mc::MarkovMonitor
SigmaPolar	module/weight/weight.h	/^flag SigmaPolar = 1;$/;"	m	namespace:weight
SignFermiLoop	module/diagram/diagram.h	/^    real SignFermiLoop;$/;"	m	class:diag::Diagram
Site	lattice/lattice.h	/^    Site(int sub = 0, Vec<int> vec = Vec<int>())$/;"	f	class:Site
Site	lattice/lattice.h	/^class Site {$/;"	c
Size	lattice/lattice.h	/^    Vec<int> Size;$/;"	m	class:Lattice
Size	utility/pyglue/pyarraywrapper.cpp	/^uint ArrayObject::Size()$/;"	f	class:Python::ArrayObject
SmoothTArray	module/weight/component.h	/^typedef WeightArray<SMOOTH_T_SIZE> SmoothTArray;$/;"	t	namespace:weight
Spin	module/diagram/component.cpp	/^spin *Vertex::Spin()$/;"	f	class:Vertex
Spin	module/diagram/component.cpp	/^spin GLine::Spin()$/;"	f	class:GLine
Spin	module/diagram/component.cpp	/^spin GLine::Spin(int dir)$/;"	f	class:GLine
Spin	module/diagram/component.cpp	/^spin Vertex::Spin(int dir)$/;"	f	class:Vertex
Spin	module/diagram/component.cpp	/^spin WLine::Spin(int dir1, int dir2)$/;"	f	class:WLine
SpinIndex	module/weight/index_map.cpp	/^int IndexMapSPIN2::SpinIndex(spin SpinIn, spin SpinOut)$/;"	f	class:IndexMapSPIN2
SpinIndex	module/weight/index_map.cpp	/^int IndexMapSPIN4::SpinIndex(const spin* Spin)$/;"	f	class:IndexMapSPIN4
SpinIndex	module/weight/index_map.cpp	/^int IndexMapSPIN4::SpinIndex(const spin* TwoSpinIn, const spin* TwoSpinOut)$/;"	f	class:IndexMapSPIN4
SpinIndex	module/weight/index_map.cpp	/^int IndexMapSPIN4::SpinIndex(spin SpinInIn, spin SpinInOut, spin SpinOutIn, spin SpinOutOut)$/;"	f	class:IndexMapSPIN4
SpinNum	module/weight/weight_array.h	/^enum SpinNum {$/;"	g	namespace:weight
SqueezeFactor	module/parameter/message.h	/^    real SqueezeFactor;$/;"	m	class:para::Message
SqueezeStatistics	estimator/estimator.cpp	/^void Estimator<T>::SqueezeStatistics(real factor)$/;"	f	class:Estimator
SqueezeStatistics	estimator/estimator.cpp	/^void EstimatorBundle<T>::SqueezeStatistics(double factor)$/;"	f	class:EstimatorBundle
SqueezeStatistics	module/markov/markov_monitor.cpp	/^void MarkovMonitor::SqueezeStatistics(real factor)$/;"	f	class:MarkovMonitor
SqueezeStatistics	module/weight/weight_estimator.cpp	/^void WeightEstimator::SqueezeStatistics(real factor)$/;"	f	class:WeightEstimator
StatisticsFile	job/job.h	/^    std::string StatisticsFile;$/;"	m	class:para::Job
SublatVol	lattice/lattice.h	/^    int SublatVol;$/;"	m	class:Lattice
Sublattice	lattice/lattice.h	/^    int Sublattice;$/;"	m	class:Site
Sublattice	module/diagram/component.cpp	/^int GLine::Sublattice(int dir)$/;"	f	class:GLine
Sublattice	module/diagram/component.cpp	/^int Vertex::Sublattice()$/;"	f	class:Vertex
Sublattice	module/diagram/component.cpp	/^int WLine::Sublattice(int dir)$/;"	f	class:WLine
SumofProbofCall	module/markov/markov.h	/^    real SumofProbofCall[NUpdates];$/;"	m	class:mc::Markov
Sweep	module/parameter/parameter.h	/^    int Sweep;$/;"	m	class:para::ParaMC
Symmetry	module/weight/index_map.h	/^    TauSymmetry Symmetry;$/;"	m	class:weight::IndexMap
T	module/parameter/parameter.h	/^    real T;$/;"	m	class:para::Parameter
TAU	module/weight/index_map.h	/^    TAU,$/;"	e	enum:weight::Dim
TEST	test.cpp	20;"	d	file:
THROW	utility/abort.h	32;"	d
THROW_ERROR	utility/abort.h	42;"	d
TO_DO	job/inlist_template.py	/^TO_DO = []$/;"	v
Tau	module/diagram/component.h	/^    double Tau;$/;"	m	class:diag::Vertex
TauAntiSymmetric	module/weight/index_map.h	/^    TauAntiSymmetric = -1$/;"	e	enum:weight::TauSymmetry
TauIndex	module/weight/index_map.cpp	/^int IndexMap::TauIndex(real t_in, real t_out) const$/;"	f	class:IndexMap
TauIndex	module/weight/index_map.cpp	/^int IndexMap::TauIndex(real tau) const$/;"	f	class:IndexMap
TauSymmetric	module/weight/index_map.h	/^    TauSymmetric = 1,$/;"	e	enum:weight::TauSymmetry
TauSymmetry	module/weight/index_map.h	/^enum TauSymmetry {$/;"	g	namespace:weight
TestDiagCounter	module/markov/markov_diag_counter.cpp	/^int mc::TestDiagCounter()$/;"	f	class:mc
TestDiagram	module/diagram/diagram_test.cpp	/^int diag::TestDiagram()$/;"	f	class:diag
TestDictionary	utility/dictionary_test.cpp	/^int TestDictionary()$/;"	f
TestEstimator	estimator/estimator_test.cpp	/^int TestEstimator()$/;"	f
TestLattice	lattice/lattice_test.cpp	/^int TestLattice()$/;"	f
TestMarkov	module/markov/markov_test.cpp	/^int mc::TestMarkov()$/;"	f	class:mc
TestObservableComplex	estimator/estimator_test.cpp	/^void TestObservableComplex()$/;"	f
TestObservableReal	estimator/estimator_test.cpp	/^void TestObservableReal()$/;"	f
TestRNG	utility/rng_test.cpp	/^int TestRNG()$/;"	f
TestTimer	utility/timer_test.cpp	/^int TestTimer()$/;"	f
Test_Cast	utility/dictionary_test.cpp	/^void Test_Cast()$/;"	f
Test_Counter	module/markov/markov_diag_counter.cpp	/^void Test_Counter()$/;"	f
Test_Diagram_Component	module/diagram/diagram_test.cpp	/^void Test_Diagram_Component()$/;"	f
Test_Diagram_Component_Bundle	module/diagram/diagram_test.cpp	/^void Test_Diagram_Component_Bundle()$/;"	f
Test_Diagram_IO	module/diagram/diagram_test.cpp	/^void Test_Diagram_IO()$/;"	f
Test_Dict	utility/dictionary_test.cpp	/^void Test_Dict()$/;"	f
Test_Lattice	lattice/lattice_test.cpp	/^void Test_Lattice()$/;"	f
Test_RNG_Bound_And_Efficiency	utility/rng_test.cpp	/^void Test_RNG_Bound_And_Efficiency()$/;"	f
Test_RNG_IO	utility/rng_test.cpp	/^void Test_RNG_IO()$/;"	f
Test_Ref	utility/dictionary_test.cpp	/^void Test_Ref()$/;"	f
Test_Updates	module/markov/markov_test.cpp	/^void Test_Updates()$/;"	f
ThrowRatio	estimator/estimator.cpp	/^const real ThrowRatio = 1.0 \/ 3;$/;"	v
ToDict	estimator/estimator.cpp	/^Dictionary Estimator<T>::ToDict()$/;"	f	class:Estimator
ToDict	estimator/estimator.cpp	/^Dictionary EstimatorBundle<T>::ToDict()$/;"	f	class:EstimatorBundle
ToDict	module/diagram/diagram_IO.cpp	/^Dictionary Diagram::ToDict()$/;"	f	class:Diagram
ToDict	module/markov/markov_monitor.cpp	/^Dictionary MarkovMonitor::ToDict()$/;"	f	class:MarkovMonitor
ToDict	module/parameter/parameter.cpp	/^Dictionary ParaMC::ToDict()$/;"	f	class:ParaMC
ToDict	module/weight/component.cpp	/^Dictionary G::ToDict()$/;"	f	class:G
ToDict	module/weight/component.cpp	/^Dictionary Polar::ToDict()$/;"	f	class:Polar
ToDict	module/weight/component.cpp	/^Dictionary Sigma::ToDict()$/;"	f	class:Sigma
ToDict	module/weight/component.cpp	/^Dictionary W::ToDict()$/;"	f	class:W
ToDict	module/weight/weight.cpp	/^Dictionary weight::Weight::ToDict(flag _flag)$/;"	f	class:weight::Weight
ToDict	module/weight/weight_array.cpp	/^Dictionary WeightArray<DIM>::ToDict()$/;"	f	class:weight::WeightArray
ToDict	module/weight/weight_estimator.cpp	/^Dictionary WeightEstimator::ToDict()$/;"	f	class:WeightEstimator
ToPy	utility/dictionary.cpp	/^Object Dictionary::ToPy() const$/;"	f	class:Dictionary
ToString	module/diagram/component.cpp	/^const string ToString(const spin &s)$/;"	f
ToString	utility/rng.cpp	/^std::string ToString(const RandomFactory& rng)$/;"	f
ToString	utility/utility.cpp	/^std::string ToString(const double x, const int width, const int decDigits)$/;"	f
ToString	utility/utility.h	/^std::string ToString(const T& value)$/;"	f
ToString	utility/vector.h	/^std::string ToString(Vec<T> value)$/;"	f
Toss	module/parameter/parameter.h	/^    int Toss;$/;"	m	class:para::ParaMC
Type	job/job.h	/^    type Type;$/;"	m	class:para::Job
TypeInvalid	utility/abort.h	/^EXCEPTION(TypeInvalid);$/;"	v
TypeName	job/job.h	/^    std::set<std::string> TypeName = { "MC", "DiagCount" };$/;"	m	class:para::Job
UP	utility/convention.h	/^            UP };$/;"	e	enum:spin
UpDown2DownUp	module/weight/index_map.h	/^                   UpDown2DownUp };$/;"	e	enum:weight::SPIN4Filter
UpDown2UpDown	module/weight/index_map.h	/^                   UpDown2UpDown,$/;"	e	enum:weight::SPIN4Filter
UpUp2UpUp	module/weight/index_map.h	/^enum SPIN4Filter { UpUp2UpUp,$/;"	e	enum:weight::SPIN4Filter
Update	utility/dictionary.cpp	/^void Dictionary::Update(const Dictionary& dict)$/;"	f	class:Dictionary
UpdateWithMessage	module/parameter/parameter.cpp	/^void Parameter::UpdateWithMessage(const Message& Message_)$/;"	f	class:Parameter
VOL	module/weight/index_map.h	/^    VOL,$/;"	e	enum:weight::Dim
Value	estimator/estimator.cpp	/^T Estimator<T>::Value()$/;"	f	class:Estimator
ValueInvalid	utility/abort.h	/^EXCEPTION(ValueInvalid);$/;"	v
Vec	utility/vector.h	/^    Vec()$/;"	f	class:Vec
Vec	utility/vector.h	/^    Vec(T value)$/;"	f	class:Vec
Vec	utility/vector.h	/^    Vec(T* value)$/;"	f	class:Vec
Vec	utility/vector.h	/^    Vec(std::initializer_list<T> list)$/;"	f	class:Vec
Vec	utility/vector.h	/^class Vec {$/;"	c
Vec2Index	lattice/lattice.cpp	/^int Lattice::Vec2Index(const Vec<int>& vec) const$/;"	f	class:Lattice
Vec2Index	lattice/lattice.cpp	/^int Lattice::Vec2Index(std::initializer_list<int> list) const$/;"	f	class:Lattice
Ver	module/diagram/diagram.h	/^    Bundle<Vertex> Ver;$/;"	m	class:diag::Diagram
Version	module/parameter/message.h	/^    int Version;$/;"	m	class:para::Message
Version	module/parameter/parameter.h	/^    int Version;$/;"	m	class:para::Parameter
Vertex	module/diagram/component.h	/^class Vertex {$/;"	c	namespace:diag
VertexStyle	module/diagram/diagram_IO.cpp	/^string VertexStyle(bool IsWorm, int sublattice)$/;"	f
Vol	lattice/lattice.h	/^    int Vol;$/;"	m	class:Lattice
W	module/diagram/diagram.h	/^    Bundle<WLine> W;$/;"	m	class:diag::Diagram
W	module/markov/markov.h	/^    weight::W* W;$/;"	m	class:mc::Markov
W	module/weight/component.cpp	/^W::W(const Lattice& lat, real Beta, uint MaxTauBin)$/;"	f	class:W
W	module/weight/component.h	/^class W {$/;"	c	namespace:weight
W	module/weight/weight.h	/^    W* W;$/;"	m	class:weight::Weight
WARNING	utility/logger.h	/^                WARNING,$/;"	e	enum:LogLevel
WHash	module/diagram/diagram.h	/^    bool WHash[MAX_K + 1];$/;"	m	class:diag::Diagram
WHashCheck	module/diagram/diagram.cpp	/^bool Diagram::WHashCheck(Momentum k)$/;"	f	class:Diagram
WLine	module/diagram/component.h	/^class WLine {$/;"	c	namespace:diag
WLineStyle	module/diagram/diagram_IO.cpp	/^string WLineStyle(bool IsMeasure)$/;"	f
WMeasure	module/diagram/diagram.h	/^    wLine WMeasure;$/;"	m	class:diag::Diagram
WWeight	module/diagram/diagram.h	/^    weight::W* WWeight;$/;"	m	class:diag::Diagram
Weight	environment/environment.h	/^    weight::Weight Weight;$/;"	m	class:EnvMonteCarlo
Weight	module/diagram/component.h	/^    Complex Weight;$/;"	m	class:diag::GLine
Weight	module/diagram/component.h	/^    Complex Weight;$/;"	m	class:diag::WLine
Weight	module/diagram/component.h	/^    real Weight;$/;"	m	class:diag::WormClass
Weight	module/diagram/diagram.h	/^    Complex Phase, Weight;$/;"	m	class:diag::Diagram
Weight	module/markov/markov_monitor.h	/^    weight::Weight *Weight;$/;"	m	class:mc::MarkovMonitor
Weight	module/weight/component.h	/^    static real Weight()$/;"	f	class:weight::Norm
Weight	module/weight/component.h	/^    static real Weight(const Site &, const Site &, real, real)$/;"	f	class:weight::Worm
Weight	module/weight/component_MC.cpp	/^Complex G::Weight(const Site& rin, const Site& rout, real tin, real tout, spin SpinIn, spin SpinOut, bool IsMeasure) const$/;"	f	class:G
Weight	module/weight/component_MC.cpp	/^Complex G::Weight(int dir, const Site& r1, const Site& r2, real t1, real t2, spin Spin1, spin Spin2, bool IsMeasure) const$/;"	f	class:G
Weight	module/weight/component_MC.cpp	/^Complex W::Weight(const Site& rin, const Site& rout, real tin, real tout, spin* SpinIn, spin* SpinOut, bool IsWorm, bool IsMeasure, bool IsDelta) const$/;"	f	class:W
Weight	module/weight/component_MC.cpp	/^Complex W::Weight(int dir, const Site& r1, const Site& r2, real t1, real t2, spin* Spin1, spin* Spin2, bool IsWorm, bool IsMeasure, bool IsDelta) const$/;"	f	class:W
Weight	module/weight/weight.cpp	/^weight::Weight::Weight(bool IsAllSymmetric)$/;"	f	class:weight::Weight
Weight	module/weight/weight.h	/^class Weight {$/;"	c	namespace:weight
WeightArray	module/weight/weight_array.h	/^    WeightArray()$/;"	f	class:weight::WeightArray
WeightArray	module/weight/weight_array.h	/^class WeightArray {$/;"	c	namespace:weight
WeightEstimator	module/weight/weight_estimator.cpp	/^WeightEstimator::WeightEstimator()$/;"	f	class:WeightEstimator
WeightEstimator	module/weight/weight_estimator.h	/^class WeightEstimator {$/;"	c	namespace:weight
WeightFile	job/job.h	/^    std::string WeightFile;$/;"	m	class:para::Job
WeightKey	environment/envMonteCarlo.cpp	/^const string WeightKey = "Weight";$/;"	v
Worm	module/diagram/diagram.h	/^    WormClass Worm;$/;"	m	class:diag::Diagram
Worm	module/markov/markov.h	/^    diag::WormClass* Worm;$/;"	m	class:mc::Markov
Worm	module/weight/component.h	/^class Worm {$/;"	c	namespace:weight
WormClass	module/diagram/component.h	/^    WormClass()$/;"	f	class:diag::WormClass
WormClass	module/diagram/component.h	/^    WormClass(vertex ira, vertex masha, int dk, int s)$/;"	f	class:diag::WormClass
WormClass	module/diagram/component.h	/^class WormClass {$/;"	c	namespace:diag
WormEstimator	module/markov/markov_monitor.h	/^    EstimatorBundle<real> WormEstimator;$/;"	m	class:mc::MarkovMonitor
WormSpaceReweight	module/markov/markov.h	/^    real* WormSpaceReweight;$/;"	m	class:mc::Markov
WormSpaceReweight	module/parameter/parameter.h	/^    real WormSpaceReweight;$/;"	m	class:para::ParaMC
WriteDiagram2gv	module/diagram/diagram_IO.cpp	/^void Diagram::WriteDiagram2gv(string path)$/;"	f	class:Diagram
Zero	utility/utility.cpp	/^bool Zero(real x, real eps)$/;"	f
_AllocateGW	module/weight/weight.cpp	/^void weight::Weight::_AllocateGW(const ParaMC &para)$/;"	f	class:weight::Weight
_AllocateSigmaPolar	module/weight/weight.cpp	/^void weight::Weight::_AllocateSigmaPolar(const ParaMC &para)$/;"	f	class:weight::Weight
_Array	utility/vector.h	/^    T _Array[D];$/;"	m	class:Vec
_Beta	module/weight/weight_estimator.h	/^    real _Beta;$/;"	m	class:weight::WeightEstimator
_CacheDeltaT	module/weight/index_map.h	/^    uint _CacheDeltaT[DELTA_T_SIZE];$/;"	m	class:weight::IndexMap
_CacheSmoothT	module/weight/index_map.h	/^    uint _CacheSmoothT[SMOOTH_T_SIZE];$/;"	m	class:weight::IndexMap
_CheckBalance	module/markov/markov.cpp	/^std::string Markov::_CheckBalance(Operations op1, Operations op2)$/;"	f	class:Markov
_CheckK	module/diagram/diagram_check.cpp	/^bool Diagram::_CheckK()$/;"	f	class:Diagram
_CheckSpin	module/diagram/diagram_check.cpp	/^bool Diagram::_CheckSpin()$/;"	f	class:Diagram
_CheckStatus	module/diagram/diagram_check.cpp	/^bool Diagram::_CheckStatus()$/;"	f	class:Diagram
_CheckTopo	module/diagram/diagram_check.cpp	/^bool Diagram::_CheckTopo()$/;"	f	class:Diagram
_CheckWeight	module/diagram/diagram_check.cpp	/^bool Diagram::_CheckWeight()$/;"	f	class:Diagram
_Construct	utility/pyglue/pyarraywrapper.cpp	/^void ArrayObject::_Construct(Complex* data, const uint* Shape, const int Dim)$/;"	f	class:Python::ArrayObject
_Construct	utility/pyglue/pyarraywrapper.cpp	/^void ArrayObject::_Construct(real* data, const uint* Shape, const int Dim)$/;"	f	class:Python::ArrayObject
_Data	module/weight/weight_array.h	/^    Complex* _Data;$/;"	m	class:weight::WeightArray
_DeltaTWeight	module/weight/component.h	/^    DeltaTArray _DeltaTWeight;$/;"	m	class:weight::W
_DetailBalanceStr	module/markov/markov.cpp	/^std::string Markov::_DetailBalanceStr(Operations op)$/;"	f	class:Markov
_DiagramFile	environment/environment.h	/^    std::string _DiagramFile;$/;"	m	class:EnvMonteCarlo
_EstimatorMap	estimator/estimator.h	/^    std::unordered_map<std::string, unsigned long> _EstimatorMap;$/;"	m	class:EstimatorBundle
_EstimatorVector	estimator/estimator.h	/^    std::vector<EstimatorT> _EstimatorVector;$/;"	m	class:EstimatorBundle
_FromDict	module/diagram/diagram_IO.cpp	/^void Diagram::_FromDict(const Dictionary& GDict, gLine g)$/;"	f	class:Diagram
_FromDict	module/diagram/diagram_IO.cpp	/^void Diagram::_FromDict(const Dictionary& VerDict, vertex v)$/;"	f	class:Diagram
_FromDict	module/diagram/diagram_IO.cpp	/^void Diagram::_FromDict(const Dictionary& WDict, wLine w)$/;"	f	class:Diagram
_FromDict	module/diagram/diagram_IO.cpp	/^void Diagram::_FromDict(const Dictionary& WormDict, WormClass& worm)$/;"	f	class:Diagram
_FromDict	module/parameter/parameter.cpp	/^bool Parameter::_FromDict(const Dictionary& Para)$/;"	f	class:Parameter
_IsAllSymmetric	module/weight/weight.h	/^    bool _IsAllSymmetric;$/;"	m	class:weight::Weight
_MakeSureKeyNotExists	estimator/estimator.cpp	/^bool EstimatorBundle<T>::_MakeSureKeyNotExists(string key)$/;"	f	class:EstimatorBundle
_Map	module/weight/component.h	/^    IndexMapSPIN2 _Map;$/;"	m	class:weight::G
_Map	module/weight/component.h	/^    IndexMapSPIN2 _Map;$/;"	m	class:weight::Sigma
_Map	module/weight/component.h	/^    IndexMapSPIN4 _Map;$/;"	m	class:weight::Polar
_Map	module/weight/component.h	/^    IndexMapSPIN4 _Map;$/;"	m	class:weight::W
_Map	utility/dictionary.h	/^    PythonMap _Map;$/;"	m	class:Dictionary
_MeasureWeight	module/weight/component.h	/^    weight::SmoothTArray _MeasureWeight;$/;"	m	class:weight::G
_MeasureWeight	module/weight/component.h	/^    weight::SmoothTArray _MeasureWeight;$/;"	m	class:weight::W
_Name	module/weight/weight_array.h	/^    std::string _Name;$/;"	m	class:weight::WeightArray
_Norm	module/weight/weight_estimator.h	/^    real _Norm; \/\/The normalization factor$/;"	m	class:weight::WeightEstimator
_NormAccu	module/weight/weight_estimator.h	/^    real _NormAccu; \/\/The normalization accumulation$/;"	m	class:weight::WeightEstimator
_PrintDebug	utility/pyglue/object.cpp	/^void Object::_PrintDebug() const$/;"	f	class:Python::Object
_PyPtr	utility/pyglue/object.h	/^    PyObject* _PyPtr;$/;"	m	class:Python::Object
_Shape	module/weight/index_map.h	/^    uint _Shape[SMOOTH_T_SIZE];$/;"	m	class:weight::IndexMap
_Shape	module/weight/weight_array.h	/^    uint _Shape[DIM];$/;"	m	class:weight::WeightArray
_Size	module/weight/weight_array.h	/^    uint _Size;$/;"	m	class:weight::WeightArray
_SizeDeltaT	module/weight/index_map.h	/^    uint _SizeDeltaT;$/;"	m	class:weight::IndexMap
_SizeSmoothT	module/weight/index_map.h	/^    uint _SizeSmoothT;$/;"	m	class:weight::IndexMap
_SmoothTWeight	module/weight/component.h	/^    SmoothTArray _SmoothTWeight;$/;"	m	class:weight::G
_SmoothTWeight	module/weight/component.h	/^    SmoothTArray _SmoothTWeight;$/;"	m	class:weight::W
_TauSymmetryFactor	module/weight/index_map.h	/^    int _TauSymmetryFactor;$/;"	m	class:weight::IndexMap
_ToDict	module/diagram/diagram_IO.cpp	/^Dictionary Diagram::_ToDict(WormClass worm)$/;"	f	class:Diagram
_ToDict	module/diagram/diagram_IO.cpp	/^Dictionary Diagram::_ToDict(gLine g)$/;"	f	class:Diagram
_ToDict	module/diagram/diagram_IO.cpp	/^Dictionary Diagram::_ToDict(vertex v)$/;"	f	class:Diagram
_ToDict	module/diagram/diagram_IO.cpp	/^Dictionary Diagram::_ToDict(wLine w)$/;"	f	class:Diagram
_ToDict	module/parameter/parameter.cpp	/^Dictionary Parameter::_ToDict()$/;"	f	class:Parameter
_UpdateCache	module/weight/index_map.cpp	/^void IndexMap::_UpdateCache()$/;"	f	class:IndexMap
_WeightAccu	module/weight/weight_estimator.h	/^    WeightArray<SMOOTH_T_SIZE + 1> _WeightAccu; \/\/dim=0 is order$/;"	m	class:weight::WeightEstimator
_WeightSize	module/weight/weight_estimator.h	/^    uint _WeightSize;$/;"	m	class:weight::WeightEstimator
__DelayedSignalHandler	utility/abort.cpp	/^void InterruptHandler::__DelayedSignalHandler(int signum)$/;"	f	class:InterruptHandler
__Fermion_Simulator__component__	module/diagram/component.h	10;"	d
__Fermion_Simulator__component_bundle__	module/diagram/component_bundle.h	10;"	d
__Fermion_Simulator__diagram_global__	module/diagram/diagram.h	10;"	d
__Fermion_Simulator__error_handler__	utility/abort.h	10;"	d
__Fermion_Simulator__lattice__	lattice/lattice.h	10;"	d
__Feynman_Simulator__Estimate__	estimator/estimator.h	10;"	d
__Feynman_Simulator__component__	module/weight/component.h	10;"	d
__Feynman_Simulator__environment__	environment/environment.h	10;"	d
__Feynman_Simulator__index_map__	module/weight/index_map.h	10;"	d
__Feynman_Simulator__job__	job/job.h	10;"	d
__Feynman_Simulator__markov__	module/markov/markov.h	10;"	d
__Feynman_Simulator__measure__	module/markov/markov_monitor.h	10;"	d
__Feynman_Simulator__momentum__	utility/momentum.h	10;"	d
__Feynman_Simulator__object__	utility/pyglue/object.h	10;"	d
__Feynman_Simulator__observable__	module/weight/weight.h	10;"	d
__Feynman_Simulator__pyarraywrapper__	utility/pyglue/pyarraywrapper.h	10;"	d
__Feynman_Simulator__serialization__	utility/dictionary.h	10;"	d
__Feynman_Simulator__state__	module/parameter/parameter.h	10;"	d
__Feynman_Simulator__status__	module/parameter/message.h	10;"	d
__Feynman_Simulator__type_cast__	utility/pyglue/type_cast.h	10;"	d
__Feynman_Simulator__vector__	utility/vector.h	10;"	d
__Feynman_Simulator__weight_basic__	module/weight/weight_array.h	10;"	d
__Feynman_Simulator__weight_estimator__	module/weight/weight_estimator.h	10;"	d
__IsDelaying	utility/abort.h	/^    bool __IsDelaying;$/;"	m	class:InterruptHandler
__Signal	utility/abort.cpp	/^int InterruptHandler::__Signal = -1;$/;"	m	class:InterruptHandler	file:
__Signal	utility/abort.h	/^    static int __Signal;$/;"	m	class:InterruptHandler
__SignalHandler	utility/abort.cpp	/^void InterruptHandler::__SignalHandler(int signum)$/;"	f	class:InterruptHandler
__sput	utility/sput.h	/^} __sput;$/;"	v	typeref:struct:sput
__timer_H_	utility/timer.h	7;"	d
_accumulator	estimator/estimator.h	/^    T _accumulator;$/;"	m	class:Estimator
_available_space	module/diagram/component_bundle.h	/^    int _available_space;$/;"	m	class:diag::Bundle
_bundle_name	module/diagram/component_bundle.h	/^    std::string _bundle_name;$/;"	m	class:diag::Bundle
_component_bundle	module/diagram/component_bundle.h	/^    T _component_bundle[MAX_BUNDLE];$/;"	m	class:diag::Bundle
_component_name	module/diagram/component_bundle.h	/^    T *_component_name[MAX_BUNDLE];$/;"	m	class:diag::Bundle
_counter	estimator/estimator.h	/^    uint _counter;$/;"	m	class:Estimator
_dBeta	module/weight/index_map.h	/^    real _dBeta;$/;"	m	class:weight::IndexMap
_dBetaInverse	module/weight/index_map.h	/^    real _dBetaInverse;$/;"	m	class:weight::IndexMap
_end	estimator/estimator.h	/^    uint _end;$/;"	m	class:Estimator
_eng	utility/rng.h	/^    std::mt19937 _eng;$/;"	m	class:RandomFactory
_history	estimator/estimator.h	/^    T _history[SIZE];$/;"	m	class:Estimator
_interval	estimator/estimator.h	/^    uint _interval;$/;"	m	class:Estimator
_norm	estimator/estimator.h	/^    real _norm;$/;"	m	class:Estimator
_ratio	estimator/estimator.h	/^    real _ratio;$/;"	m	class:Estimator
_spin	module/diagram/component.h	/^    spin _spin[2]; \/\/ IN\/OUT spins$/;"	m	class:diag::Vertex
_sput_check_failed	utility/sput.h	135;"	d
_sput_check_succeeded	utility/sput.h	143;"	d
_sput_die_unless_initialized	utility/sput.h	117;"	d
_sput_die_unless_suite_set	utility/sput.h	123;"	d
_sput_die_unless_test_set	utility/sput.h	129;"	d
_update	estimator/estimator.cpp	/^void Estimator<Complex>::_update()$/;"	f	class:Estimator
_update	estimator/estimator.cpp	/^void Estimator<real>::_update()$/;"	f	class:Estimator
_value	estimator/estimator.h	/^    Estimate<T> _value;$/;"	m	class:Estimator
abs	utility/momentum.cpp	/^int Momentum::abs()$/;"	f	class:Momentum
abs	utility/utility.cpp	/^real abs(real x)$/;"	f
acc_time	utility/timer.h	/^    double acc_time;$/;"	m	class:timer
add_tuple_var	utility/pyglue/pywrapper.h	/^    void add_tuple_var(Object& tup, Py_ssize_t i, Object pobj)$/;"	f	class:Python::ModuleObject
add_tuple_var	utility/pyglue/pywrapper.h	/^    void add_tuple_var(Object& tup, Py_ssize_t i,$/;"	f	class:Python::ModuleObject
add_tuple_vars	utility/pyglue/pywrapper.h	/^    void add_tuple_vars(Object& tup, Object arg)$/;"	f	class:Python::ModuleObject
add_tuple_vars	utility/pyglue/pywrapper.h	/^    void add_tuple_vars(Object& tup, const Arg& arg)$/;"	f	class:Python::ModuleObject
add_tuple_vars	utility/pyglue/pywrapper.h	/^    void add_tuple_vars(Object& tup, const First& head, const Rest&... tail)$/;"	f	class:Python::ModuleObject
arg	utility/complex.h	/^inline real arg(const Complex& c)$/;"	f
begin	utility/dictionary.h	/^    PythonMap::const_iterator begin() const$/;"	f	class:Dictionary
begin	utility/dictionary.h	/^    PythonMap::iterator begin()$/;"	f	class:Dictionary
begin	utility/vector.h	/^    const T* begin() const$/;"	f	class:Vec
beta	job/inlist_template.py	/^beta=0.5$/;"	v
c	module/weight/weight_array.h	/^    WeightArray& operator=(const WeightArray& c) = delete;$/;"	m	class:weight::WeightArray
check	utility/sput.h	/^    } check;$/;"	m	struct:sput	typeref:struct:sput::sput_check
check	utility/timer.cpp	/^bool timer::check(time_t Interval)$/;"	f	class:timer
check	utility/timer.cpp	/^void timer::check(const char* msg)$/;"	f	class:timer
checks	utility/sput.h	/^        unsigned long checks;$/;"	m	struct:sput::sput_overall
checks	utility/sput.h	/^        unsigned long checks;$/;"	m	struct:sput::sput_suite
cond	utility/sput.h	/^        const char *cond;$/;"	m	struct:sput::sput_check
configuration_	utility/logger.h	/^    loggerConf_ configuration_;$/;"	m	class:Logger
configure	utility/logger.cpp	/^void Logger::configure(const std::string& outputFile,$/;"	f	class:Logger
configured_	utility/logger.h	/^    bool configured_;$/;"	m	class:Logger
dSpin	module/diagram/component.h	/^    int dSpin;$/;"	m	class:diag::WormClass
diag	module/diagram/component.h	/^namespace diag {$/;"	n
diag	module/diagram/component_bundle.cpp	/^namespace diag {$/;"	n	file:
diag	module/diagram/component_bundle.h	/^namespace diag {$/;"	n
diag	module/diagram/diagram.h	/^namespace diag {$/;"	n
diag	module/markov/markov.h	/^namespace diag {$/;"	n
diag	module/markov/markov_monitor.h	/^namespace diag {$/;"	n
dismissed_	utility/scopeguard.h	/^    bool dismissed_;$/;"	m	class:ScopeGuard
elapsed_time	utility/timer.cpp	/^double timer::elapsed_time()$/;"	f	class:timer
end	utility/dictionary.h	/^    PythonMap::const_iterator end() const$/;"	f	class:Dictionary
end	utility/dictionary.h	/^    PythonMap::iterator end()$/;"	f	class:Dictionary
end	utility/sput.h	/^        time_t end;$/;"	m	struct:sput::sput_time
end	utility/vector.h	/^    const T* end() const$/;"	f	class:Vec
eps0	utility/utility.h	/^const real eps0 = 1.0e-9;$/;"	v
exp	utility/complex.h	/^inline Complex exp(const Complex& c)$/;"	f
fileVerbosityLevel_	utility/logger.h	/^    unsigned int fileVerbosityLevel_;$/;"	m	class:Logger
file_off	utility/logger.h	/^    static const loggerConf file_off = L_file_;$/;"	m	class:Logger
file_on	utility/logger.h	/^    static const loggerConf file_on = L_nofile_;$/;"	m	class:Logger
flag	module/weight/weight.h	/^typedef const int flag;$/;"	t	namespace:weight
gLine	module/diagram/component.h	/^typedef GLine *gLine;$/;"	t	namespace:diag
getInstance	utility/logger.cpp	/^Logger& Logger::getInstance()$/;"	f	class:Logger
iabs	utility/utility.cpp	/^int iabs(int x)$/;"	f
index	utility/momentum.cpp	/^int Momentum::index()$/;"	f	class:Momentum
initialTime_	utility/logger.h	/^    struct timeval initialTime_;$/;"	m	class:Logger	typeref:struct:Logger::timeval
initialized	utility/sput.h	/^    char initialized;$/;"	m	struct:sput
irn	utility/rng.h	/^    inline int irn(int from, int thru)$/;"	f	class:RandomFactory
line	utility/sput.h	/^        unsigned long line;$/;"	m	struct:sput::sput_check
lock	utility/logger.cpp	/^inline void Logger::lock()$/;"	f	class:Logger
lock	utility/logger.cpp	/^void Logger::lock()$/;"	f	class:Logger
lock_	utility/logger.cpp	/^pthread_mutex_t Logger::lock_ = PTHREAD_MUTEX_INITIALIZER;$/;"	m	class:Logger	file:
lock_	utility/logger.h	/^    static pthread_mutex_t lock_;$/;"	m	class:Logger
logFile_	utility/logger.h	/^    std::string logFile_;$/;"	m	class:Logger
loggerConf	utility/logger.h	/^    typedef loggerConf_ loggerConf;$/;"	t	class:Logger
loggerConf_	utility/logger.h	/^    enum loggerConf_ { L_nofile_ = 1 << 0,$/;"	g	class:Logger
loggerName_	utility/logger.h	/^    std::string loggerName_;$/;"	m	class:Logger
m_	utility/logger.cpp	/^Logger* Logger::m_ = 0;$/;"	m	class:Logger	file:
m_	utility/logger.h	/^    static Logger* m_;$/;"	m	class:Logger
main	main.cpp	/^int main(int argc, const char* argv[])$/;"	f
mc	module/markov/markov.h	/^namespace mc {$/;"	n
mc	module/markov/markov_monitor.h	/^namespace mc {$/;"	n
mod	utility/complex.h	/^inline real mod(const Complex& c)$/;"	f
mod2	utility/complex.h	/^inline real mod2(const Complex& c)$/;"	f
nG	module/diagram/component.h	/^    gLine nG[2];$/;"	m	class:diag::Vertex
nVer	module/diagram/component.h	/^    vertex nVer[2];$/;"	m	class:diag::GLine
nVer	module/diagram/component.h	/^    vertex nVer[2];$/;"	m	class:diag::WLine
nW	module/diagram/component.h	/^    wLine nW;$/;"	m	class:diag::Vertex
name	module/diagram/component.h	/^typedef int name;$/;"	t	namespace:diag
name	utility/sput.h	/^        const char *name;$/;"	m	struct:sput::sput_check
name	utility/sput.h	/^        const char *name;$/;"	m	struct:sput::sput_suite
name	utility/sput.h	/^        const char *name;$/;"	m	struct:sput::sput_test
nok	utility/sput.h	/^        unsigned long nok;$/;"	m	struct:sput::sput_overall
nok	utility/sput.h	/^        unsigned long nok;$/;"	m	struct:sput::sput_suite
nr	utility/sput.h	/^        unsigned long nr;$/;"	m	struct:sput::sput_suite
nr	utility/sput.h	/^        unsigned long nr;$/;"	m	struct:sput::sput_test
ok	utility/sput.h	/^        unsigned long ok;$/;"	m	struct:sput::sput_overall
ok	utility/sput.h	/^        unsigned long ok;$/;"	m	struct:sput::sput_suite
onExitScope_	utility/scopeguard.h	/^    std::function<void()> onExitScope_;$/;"	m	class:ScopeGuard
operator !=	lattice/lattice.cpp	/^bool operator!=(const Site& v1, const Site& v2)$/;"	f
operator !=	utility/momentum.cpp	/^bool operator!=(const Momentum& m1, const Momentum& m2)$/;"	f
operator !=	utility/momentum.cpp	/^bool operator!=(const Momentum& m1, int k)$/;"	f
operator !=	utility/momentum.cpp	/^bool operator!=(int k, const Momentum& m1)$/;"	f
operator !=	utility/vector.cpp	/^bool operator!=(const Vec<int>& v1, const Vec<int>& v2)$/;"	f
operator !=	utility/vector.cpp	/^bool operator!=(const Vec<real>& v1, const Vec<real>& v2)$/;"	f
operator &	utility/logger.h	/^inline Logger::loggerConf operator&(Logger::loggerConf __a, Logger::loggerConf __b)$/;"	f
operator ()	module/diagram/component_bundle.cpp	/^T *Bundle<T>::operator()(name name)$/;"	f	class:Bundle
operator ()	module/weight/weight_array.h	/^    const Complex& operator()(uint Index) const { return _Data[Index]; }$/;"	f	class:weight::WeightArray
operator *	utility/complex.cpp	/^Complex operator*(const Complex& lhs, const Complex& rhs)$/;"	f
operator *	utility/complex.cpp	/^Complex operator*(const Complex& lhs, real rhs)$/;"	f
operator *	utility/complex.cpp	/^Complex operator*(real lhs, const Complex& rhs)$/;"	f
operator *	utility/momentum.cpp	/^Momentum operator*(int k, const Momentum& m1)$/;"	f
operator *	utility/vector.h	/^    Vec operator*(const real& i) const$/;"	f	class:Vec
operator *	utility/vector.h	/^    Vec operator*(int i) const$/;"	f	class:Vec
operator *=	module/weight/weight_array.h	/^    WeightArray& operator*=(const T& rhs)$/;"	f	class:weight::WeightArray
operator *=	utility/complex.cpp	/^Complex& Complex::operator*=(const Complex& c)$/;"	f	class:Complex
operator *=	utility/complex.cpp	/^Complex& Complex::operator*=(const real& d)$/;"	f	class:Complex
operator +	utility/complex.cpp	/^Complex operator+(const Complex& lhs)$/;"	f
operator +	utility/complex.cpp	/^Complex operator+(const Complex& lhs, const Complex& rhs)$/;"	f
operator +	utility/complex.cpp	/^Complex operator+(const Complex& lhs, real rhs)$/;"	f
operator +	utility/complex.cpp	/^Complex operator+(real lhs, const Complex& rhs)$/;"	f
operator +	utility/momentum.cpp	/^Momentum operator+(const Momentum& m1, const Momentum& m2)$/;"	f
operator +	utility/momentum.cpp	/^Momentum operator+(const Momentum& m1, int k)$/;"	f
operator +	utility/momentum.cpp	/^Momentum operator+(int k, const Momentum& m1)$/;"	f
operator +	utility/vector.h	/^    Vec operator+(const Vec& v2) const$/;"	f	class:Vec
operator +=	module/weight/weight_array.h	/^    WeightArray& operator+=(const T& rhs)$/;"	f	class:weight::WeightArray
operator +=	utility/complex.cpp	/^Complex& Complex::operator+=(const Complex& c)$/;"	f	class:Complex
operator +=	utility/complex.cpp	/^Complex& Complex::operator+=(const real& d)$/;"	f	class:Complex
operator +=	utility/momentum.cpp	/^Momentum& Momentum::operator+=(const Momentum& m)$/;"	f	class:Momentum
operator +=	utility/momentum.cpp	/^Momentum& Momentum::operator+=(int k)$/;"	f	class:Momentum
operator +=	utility/vector.h	/^    Vec& operator+=(const Vec& v2)$/;"	f	class:Vec
operator -	utility/complex.cpp	/^Complex operator-(const Complex& c)$/;"	f
operator -	utility/complex.cpp	/^Complex operator-(const Complex& lhs, const Complex& rhs)$/;"	f
operator -	utility/complex.cpp	/^Complex operator-(const Complex& lhs, real rhs)$/;"	f
operator -	utility/complex.cpp	/^Complex operator-(real lhs, const Complex& rhs)$/;"	f
operator -	utility/momentum.cpp	/^Momentum operator-(const Momentum& m1, const Momentum& m2)$/;"	f
operator -	utility/momentum.cpp	/^Momentum operator-(const Momentum& m1, int k)$/;"	f
operator -	utility/momentum.cpp	/^Momentum operator-(int k, const Momentum& m1)$/;"	f
operator -	utility/vector.h	/^    Vec operator-(const Vec& v2) const$/;"	f	class:Vec
operator -=	module/weight/weight_array.h	/^    WeightArray& operator-=(const T& rhs)$/;"	f	class:weight::WeightArray
operator -=	utility/complex.cpp	/^Complex& Complex::operator-=(const Complex& c)$/;"	f	class:Complex
operator -=	utility/complex.cpp	/^Complex& Complex::operator-=(const real& d)$/;"	f	class:Complex
operator -=	utility/momentum.cpp	/^Momentum& Momentum::operator-=(const Momentum& m)$/;"	f	class:Momentum
operator -=	utility/momentum.cpp	/^Momentum& Momentum::operator-=(int k)$/;"	f	class:Momentum
operator -=	utility/vector.h	/^    Vec& operator-=(const Vec& v2)$/;"	f	class:Vec
operator /	utility/complex.cpp	/^Complex operator\/(const Complex& lhs, const Complex& rhs)$/;"	f
operator /	utility/complex.cpp	/^Complex operator\/(const Complex& rhs, real lhs)$/;"	f
operator /	utility/complex.cpp	/^Complex operator\/(real x, const Complex& y)$/;"	f
operator /=	module/weight/weight_array.h	/^    WeightArray& operator\/=(const T& rhs)$/;"	f	class:weight::WeightArray
operator /=	utility/complex.cpp	/^Complex& Complex::operator\/=(const Complex& c)$/;"	f	class:Complex
operator /=	utility/complex.cpp	/^Complex& Complex::operator\/=(const real& d)$/;"	f	class:Complex
operator <<	estimator/estimator.cpp	/^ostream& operator<<(ostream& os, const Estimate<Complex>& e)$/;"	f
operator <<	estimator/estimator.cpp	/^ostream& operator<<(ostream& os, const Estimate<real>& e)$/;"	f
operator <<	utility/complex.cpp	/^ostream& operator<<(ostream& s, const Complex& c)$/;"	f
operator <<	utility/momentum.cpp	/^std::ostream& operator<<(std::ostream& os, const Momentum& m)$/;"	f
operator <<	utility/rng.cpp	/^std::ostream& operator<<(std::ostream& os, RandomFactory& r)$/;"	f
operator <<	utility/timer.cpp	/^std::ostream& operator<<(std::ostream& os, timer& t)$/;"	f
operator <<	utility/vector.cpp	/^ostream& operator<<(ostream& os, const Vec<T>& v)$/;"	f
operator =	utility/complex.cpp	/^Complex& Complex::operator=(const Complex& c)$/;"	f	class:Complex
operator =	utility/complex.cpp	/^Complex& Complex::operator=(const real& d)$/;"	f	class:Complex
operator =	utility/dictionary.h	/^    Dictionary& operator=(const Dictionary& dict)$/;"	f	class:Dictionary
operator =	utility/momentum.cpp	/^Momentum& Momentum::operator=(const Momentum& m)$/;"	f	class:Momentum
operator =	utility/pyglue/object.cpp	/^Object& Object::operator=(const Object& obj)$/;"	f	class:Python::Object
operator =	utility/pyglue/pyarraywrapper.h	/^    ArrayObject& operator=(const ArrayObject& obj)$/;"	f	class:Python::ArrayObject
operator =	utility/pyglue/pywrapper.cpp	/^ModuleObject& ModuleObject::operator=(const ModuleObject& obj)$/;"	f	class:Python::ModuleObject
operator =	utility/pyglue/pywrapper.h	/^    AnyObject& operator=(const AnyObject& obj)$/;"	f	class:Python::AnyObject
operator ==	lattice/lattice.cpp	/^bool operator==(const Site& v1, const Site& v2)$/;"	f
operator ==	utility/momentum.cpp	/^bool operator==(const Momentum& m1, const Momentum& m2)$/;"	f
operator ==	utility/momentum.cpp	/^bool operator==(const Momentum& m1, int k)$/;"	f
operator ==	utility/momentum.cpp	/^bool operator==(int k, const Momentum& m1)$/;"	f
operator ==	utility/vector.cpp	/^bool operator==(const Vec<int>& v1, const Vec<int>& v2)$/;"	f
operator ==	utility/vector.cpp	/^bool operator==(const Vec<real>& v1, const Vec<real>& v2)$/;"	f
operator >>	utility/complex.cpp	/^istream& operator>>(istream& s, Complex& c)$/;"	f
operator >>	utility/momentum.cpp	/^std::istream& operator>>(std::istream& is, Momentum& m)$/;"	f
operator >>	utility/rng.cpp	/^std::istream& operator>>(std::istream& is, RandomFactory& r)$/;"	f
operator >>	utility/vector.cpp	/^istream& operator>>(istream& is, Vec<T>& v)$/;"	f
operator []	estimator/estimator.cpp	/^Estimator<T>& EstimatorBundle<T>::operator[](int index)$/;"	f	class:EstimatorBundle
operator []	estimator/estimator.cpp	/^Estimator<T>& EstimatorBundle<T>::operator[](string name)$/;"	f	class:EstimatorBundle
operator []	module/diagram/component_bundle.cpp	/^T &Bundle<T>::operator[](name name)$/;"	f	class:Bundle
operator []	module/weight/weight_array.h	/^    Complex& operator[](uint Index) { return _Data[Index]; }$/;"	f	class:weight::WeightArray
operator []	utility/dictionary.cpp	/^Python::AnyObject& Dictionary::operator[](const std::string& key)$/;"	f	class:Dictionary
operator []	utility/vector.h	/^    T& operator[](int index)$/;"	f	class:Vec
operator []	utility/vector.h	/^    const T& operator[](int index) const$/;"	f	class:Vec
operator |	utility/logger.h	/^inline Logger::loggerConf operator|(Logger::loggerConf __a, Logger::loggerConf __b)$/;"	f
out	utility/sput.h	/^    FILE *out;$/;"	m	struct:sput
out_	utility/logger.h	/^    std::ofstream out_;$/;"	m	class:Logger
overall	utility/sput.h	/^    } overall;$/;"	m	struct:sput	typeref:struct:sput::sput_overall
para	job/job.h	/^namespace para {$/;"	n
para	module/markov/markov.h	/^namespace para {$/;"	n
para	module/markov/markov_monitor.h	/^namespace para {$/;"	n
para	module/parameter/message.h	/^namespace para {$/;"	n
para	module/parameter/parameter.h	/^namespace para {$/;"	n
para	module/weight/weight.h	/^namespace para {$/;"	n
phase	utility/complex.h	/^inline Complex phase(const Complex& c)$/;"	f
polar	utility/complex.h	/^inline Complex polar(real r, real t)$/;"	f
pow	utility/complex.h	/^inline Complex pow(const Complex& z, const Complex& w)$/;"	f
pow	utility/complex.h	/^inline Complex pow(const Complex& z, real u)$/;"	f
print	utility/logger.cpp	/^void Logger::print(const unsigned int verbosityLevel,$/;"	f	class:Logger
real	utility/convention.h	/^typedef double real;$/;"	t
real	utility/rng.h	/^typedef double real;$/;"	t
restart	utility/timer.cpp	/^void timer::restart(const char* msg)$/;"	f	class:timer
running	utility/timer.h	/^    bool running;$/;"	m	class:timer
screenVerbosityLevel_	utility/logger.h	/^    unsigned int screenVerbosityLevel_;$/;"	m	class:Logger
screen_off	utility/logger.h	/^    static const loggerConf screen_off = L_screen_;$/;"	m	class:Logger
screen_on	utility/logger.h	/^    static const loggerConf screen_on = L_noscreen_;$/;"	m	class:Logger
size	utility/vector.h	/^    uint size() const$/;"	f	class:Vec
source	module/weight/weight_array.h	/^    WeightArray(const WeightArray& source) = delete;$/;"	m	class:weight::WeightArray
spin	utility/convention.h	/^enum spin { DOWN,$/;"	g
sput	utility/sput.h	/^static struct sput {$/;"	s
sput_check	utility/sput.h	/^    struct sput_check {$/;"	s	struct:sput
sput_enter_suite	utility/sput.h	179;"	d
sput_fail_if	utility/sput.h	207;"	d
sput_fail_unless	utility/sput.h	226;"	d
sput_finish_testing	utility/sput.h	190;"	d
sput_get_return_value	utility/sput.h	176;"	d
sput_leave_suite	utility/sput.h	163;"	d
sput_overall	utility/sput.h	/^    struct sput_overall {$/;"	s	struct:sput
sput_run_test	utility/sput.h	245;"	d
sput_set_output_stream	utility/sput.h	202;"	d
sput_start_testing	utility/sput.h	155;"	d
sput_suite	utility/sput.h	/^    struct sput_suite {$/;"	s	struct:sput
sput_test	utility/sput.h	/^    struct sput_test {$/;"	s	struct:sput
sput_time	utility/sput.h	/^    struct sput_time {$/;"	s	struct:sput
sqrt	utility/complex.h	/^inline Complex sqrt(const Complex& x)$/;"	f
start	utility/sput.h	/^        time_t start;$/;"	m	struct:sput::sput_time
start	utility/timer.cpp	/^void timer::start(const char* msg)$/;"	f	class:timer
start_clock	utility/timer.h	/^    clock_t start_clock;$/;"	m	class:timer
start_time	utility/timer.h	/^    time_t start_time;$/;"	m	class:timer
stop	utility/timer.cpp	/^void timer::stop(const char* msg)$/;"	f	class:timer
suite	utility/sput.h	/^    } suite;$/;"	m	struct:sput	typeref:struct:sput::sput_suite
suites	utility/sput.h	/^        unsigned long suites;$/;"	m	struct:sput::sput_overall
test	utility/sput.h	/^    } test;$/;"	m	struct:sput	typeref:struct:sput::sput_test
test_H	test.h	2;"	d
time	utility/sput.h	/^    } time;$/;"	m	struct:sput	typeref:struct:sput::sput_time
timer	utility/timer.h	/^    timer()$/;"	f	class:timer
timer	utility/timer.h	/^class timer {$/;"	c
type	job/job.h	/^    typedef std::string type;$/;"	t	class:para::Job
type	utility/sput.h	/^        const char *type;$/;"	m	struct:sput::sput_check
uint	utility/convention.h	/^typedef unsigned int uint;$/;"	t
unlock	utility/logger.cpp	/^inline void Logger::unlock()$/;"	f	class:Logger
unlock	utility/logger.cpp	/^void Logger::unlock()$/;"	f	class:Logger
urn	utility/rng.h	/^    inline real urn()$/;"	f	class:RandomFactory
vertex	module/diagram/component.h	/^typedef Vertex *vertex;$/;"	t	namespace:diag
wLine	module/diagram/component.h	/^typedef WLine *wLine;$/;"	t	namespace:diag
weight	module/diagram/diagram.h	/^namespace weight {$/;"	n
weight	module/markov/markov.h	/^namespace weight {$/;"	n
weight	module/weight/component.h	/^namespace weight {$/;"	n
weight	module/weight/index_map.h	/^namespace weight {$/;"	n
weight	module/weight/weight.h	/^namespace weight {$/;"	n
weight	module/weight/weight_array.cpp	/^namespace weight {$/;"	n	file:
weight	module/weight/weight_array.h	/^namespace weight {$/;"	n
weight	module/weight/weight_estimator.h	/^namespace weight {$/;"	n
~ITypeCast	utility/pyglue/type_cast_interface.h	/^    ~ITypeCast() {}$/;"	f	class:Python::ITypeCast
~InterruptHandler	utility/abort.cpp	/^InterruptHandler::~InterruptHandler()$/;"	f	class:InterruptHandler
~Logger	utility/logger.cpp	/^Logger::~Logger()$/;"	f	class:Logger
~Object	utility/pyglue/object.h	/^    ~Object()$/;"	f	class:Python::Object
~ScopeGuard	utility/scopeguard.h	/^    ~ScopeGuard()$/;"	f	class:ScopeGuard
~Weight	module/weight/weight.cpp	/^weight::Weight::~Weight()$/;"	f	class:weight::Weight
~WeightArray	module/weight/weight_array.h	/^    ~WeightArray() { Free(); };$/;"	f	class:weight::WeightArray
